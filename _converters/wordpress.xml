<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/3.0.2" created="2011-02-14 21:45"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>The Ninja Ferret</title>
	<link>http://blog.ninjaferret.co.uk</link>
	<description>Random thoughts of a software developer</description>
	<pubDate>Tue, 01 Feb 2011 01:27:14 +0000</pubDate>
	<generator>http://wordpress.org/?v=3.0.2</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://blog.ninjaferret.co.uk</wp:base_site_url>
	<wp:base_blog_url>http://blog.ninjaferret.co.uk</wp:base_blog_url>
		<wp:category><wp:category_nicename>net</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[.NET]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>c</wp:category_nicename><wp:category_parent>.NET</wp:category_parent><wp:cat_name><![CDATA[C#]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>conferences</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Conferences]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>developerdeveloperdeveloper</wp:category_nicename><wp:category_parent>Conferences</wp:category_parent><wp:cat_name><![CDATA[DeveloperDeveloperDeveloper]]></wp:cat_name><wp:category_description><![CDATA[DeveloperDeveloperDeveloper is a series of free conferences for the Microsoft community by the community]]></wp:category_description></wp:category>
		<wp:category><wp:category_nicename>development-methodologies</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Development Methodologies]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>kanban</wp:category_nicename><wp:category_parent>Development Methodologies</wp:category_parent><wp:cat_name><![CDATA[Kanban]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>lean</wp:category_nicename><wp:category_parent>Development Methodologies</wp:category_parent><wp:cat_name><![CDATA[Lean]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>platform</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Platform]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>reflection</wp:category_nicename><wp:category_parent>.NET</wp:category_parent><wp:cat_name><![CDATA[Reflection]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>software-architecture</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Software Architecture]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>uk-tech-days</wp:category_nicename><wp:category_parent>Conferences</wp:category_parent><wp:cat_name><![CDATA[UK Tech Days]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>uncategorized</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Uncategorized]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>wcf</wp:category_nicename><wp:category_parent>.NET</wp:category_parent><wp:cat_name><![CDATA[WCF]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>windows-phone-7</wp:category_nicename><wp:category_parent>Platform</wp:category_parent><wp:cat_name><![CDATA[Windows Phone 7]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>barcamp</wp:category_nicename><wp:category_parent>Conferences</wp:category_parent><wp:cat_name><![CDATA[BarCamp]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>bdd</wp:category_nicename><wp:category_parent>Development Methodologies</wp:category_parent><wp:cat_name><![CDATA[BDD]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>cqrs</wp:category_nicename><wp:category_parent>Software Architecture</wp:category_parent><wp:cat_name><![CDATA[CQRS]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>ddd8-developerdeveloperdeveloper-conferences</wp:category_nicename><wp:category_parent>DeveloperDeveloperDeveloper</wp:category_parent><wp:cat_name><![CDATA[DDD8]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>domain-events</wp:category_nicename><wp:category_parent>Software Architecture</wp:category_parent><wp:cat_name><![CDATA[Domain Events]]></wp:cat_name></wp:category>
			<wp:tag><wp:tag_slug>architecture</wp:tag_slug><wp:tag_name><![CDATA[Architecture]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>bar-camp</wp:tag_slug><wp:tag_name><![CDATA[Bar Camp]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>conference</wp:tag_slug><wp:tag_name><![CDATA[Conference]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>conferences</wp:tag_slug><wp:tag_name><![CDATA[Conferences]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>cqrs</wp:tag_slug><wp:tag_name><![CDATA[CQRS]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>ddd</wp:tag_slug><wp:tag_name><![CDATA[DDD]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>developerdeveloperdeveloper</wp:tag_slug><wp:tag_name><![CDATA[DeveloperDeveloperDeveloper]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>domain-events</wp:tag_slug><wp:tag_name><![CDATA[Domain Events]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>registration</wp:tag_slug><wp:tag_name><![CDATA[Registration]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>windows-phone-7</wp:tag_slug><wp:tag_name><![CDATA[Windows Phone 7]]></wp:tag_name></wp:tag>
		
	<generator>http://wordpress.org/?v=3.0.2</generator>

		<item>
		<title>Architecture series</title>
		<link>http://blog.ninjaferret.co.uk/?p=171</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category domain="tag"><![CDATA[Architecture]]></category>

		<category domain="tag" nicename="architecture"><![CDATA[Architecture]]></category>

		<category><![CDATA[Software Architecture]]></category>

		<category domain="category" nicename="software-architecture"><![CDATA[Software Architecture]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=171</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Overview</h2>
Architecture of software systems is vitally important in the development of robust and scalable solutions but also architecture can be expensive and time consuming. However, over the last few decades software developers have been identifying <a href="http://en.wikipedia.org/wiki/Design_pattern_(computer_science)">Design Patterns</a> for the structure of their code to help them develop robust software that is easy to maintain there are a number of patterns and principles that can be applied to the wider architecture of your system. 

In the last decade the nature of the software we are developing has radically changed, in the 90s the desktop ruled the world and people installed applications on their own desktops and the data was stored on their desktops and the web was only beginning it's journey into a truly interactive medium. Within organisations there was some infrastructure but over the last decade on-line systems started to rule the world, services and web sites started playing a major part of people's lives and this places a completely new set of demands on how we approach software. Our on-line presence is important now and applications on the internet can suddenly become hugely successful (twitter and facebook are two prime examples) so there is a need to become scalable and robust, there is little scope for bringing down your site every evening to perform maintenance if you are reaching a global audience.

What I want to do in this series of posts is explore some of the concepts that are exciting me in software architecture, explore some of the myths that surround the architectures and eventually start bringing them together for developing greenfield applications and also looking at migration patterns for existing systems. I think that it is important to understand when you need to apply a certain architectural model, not everything needs to be applied to every solution, not every pattern or methodology works for every scenario and as architects and engineers we do have a tendency to "over-engineer" a solution, sometimes it is better to do the simple thing first and get to market quicker.

<h3>A sample application...</h3>

Perhaps one of the hardest things that I can think of when writing a blog post is whether I should write examples, what examples will they be, how to keep the examples simple and yet informative enough for people to take something valuable away. Within the series of posts I will try to keep a standard example and apply the patterns and principles to that example domain. I think that I am going to start with a simple shop model and focus on different parts of the architecture that will allow the system to function properly.

To give you a brief idea of the areas of the shop that I am thinking of:

<ul>
  <li>Stock management - the shop needs to retain only a certain amount of stock to fullfil the needs of its customers so we need to track how much we are ordering, how fast it is selling etc,</li>
  <li>Sales management - when a customer has found what they are looking for the products that they are buying need to be processed, the total needs to be calculated and the transaction completed</li>
  <li>Staff management - the shop is going to require something for the staff to schedule shifts, track hours worked for payment, track sick time and holidays</li>
</ul>

<h2>Current Architecture posts</h2>

Over time I will be writing these posts and adding a brief summary below:

<h3>CQRS</h3>

<strong>CQRS</strong> <em>(Command Query Responsibility Segregation)</em> is an increasingly popular topic among the software development community (wel, at least in the .NET community that I am mostly involved in). It applies a simple rule <em>"separate your commands from your queries"</em> and this post explores the benefits of this extremely simple pattern.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date>2010-10-16 23:32:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287271940]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>What have you learned today?</title>
		<link>http://blog.ninjaferret.co.uk/?p=260</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category><![CDATA[BDD]]></category>

		<category domain="category" nicename="bdd"><![CDATA[BDD]]></category>

		<category><![CDATA[Development Methodologies]]></category>

		<category domain="category" nicename="development-methodologies"><![CDATA[Development Methodologies]]></category>

		<category><![CDATA[Lean]]></category>

		<category domain="category" nicename="lean"><![CDATA[Lean]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=260</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Software development is about learning/discovery</h2>

Most people think that software development is about producing a piece of code to fullfil a task, but is it really that simple? I am increasingly agreeing with the BDD community that software development is about learning, how can developers develop something to solve a business problem without understanding that problem? 

Mary Poppendieck in <a href="http://www.amazon.co.uk/Lean-Software-Development-Agile-Toolkit/dp/0321150783"> Lean Software Development</a> states:

<blockquote>
Development is quite different than production. Think of development as creating a recipe and production as following the recipe... In fact, the whole idea of developing a recipe is to try many variations on a theme and discover the best dish.
</blockquote>

I think that this is an interesting analogy because the software is actually the thing that facilitates the task that the user wishes to do so you could say it gives them the recipe to be efficient at their task. When it comes to software the "production" is actually using the software not building it, the building of the software is the development. Going back onto the last few words of her quote Mary is putting the learning at the heart of the development process.

I actually think that it is not just the developers who learn, if you are talking regularly with the customer then they are seeing what you are developing and they will change their minds, what they thought would work well may not work well at all when you come to develop it and they are learning about themselves, their needs and perhaps the needs of their customers. 

<h2>How do we learn?</h2>

While we can learn through reading up on a subject and thinking more around it but the majority of discovery and learning comes through practice. You can teach me a subject and I will pick up on the key points but when it comes down it apply it is when I truly start grasping the concepts. 

Some of the greatest discoveries in science are not done through someone planning out all of the experiments that they are going to do and knowing what they will discover, people try something, measure it and then go "Oh... that wasn't what I expected to happen" then they figure out why. If Alexander Fleming had not looked at his "ruined" experiment and gone "why is it that those areas are clear of bacteria?" then he would not have discovered penicillin but that certainly did not come from a well thought out plan.

When things go wrong is when we can learn the most so perhaps the best way to learn is just to let things go wrong, inspect and adapt. Our learning cycle should really be plan, do, learn and adapt but the key is to reduce the time of that cycle, the shorter the period of learning the better.



<h2>Solving problems not providing solutions</h2>

So, with the idea that we are constantly learning and that the software we develop is an evolving tool that reflects our current learning and assists further learning then what do we do with it?

We use this learning not to just implement what the customer has asked for, we use the tools that we have in our armoury to get down to the root problem we are trying to solve. Quite often people will come to me with specific solutions to a perceived problem but actually the problem is very different. 

I have recently worked on a project where I was asked to modify an integration system so that it would store two extra dates that would mark the cut-off point for certain activities, we would need to default them when importing data from a new system, provide a user interface for the users to be able to set the date. These dates would be sent to a third party who would act on them accordingly but could only be sent once so the user interface would have to then disable the fields once the data had been sent. Rather than just implementing the solution I talked to them about the problem and we dug only slightly deeper and the root problem was that currently they set up calendar entries and someone manually would go through turning off the features in the third party product on the appropriate date, which as time consuming. After discussions we realised that the defaults would be more than enough because they worked for over 90% of the cases and it would be a much smaller task to deal with the exceptional cases manually. The user interface disappeared, we reduced the amount of work the users had to do (they did not have to set these dates) and it kept the domain from leaking into the integration layer, everyone is happy.

<h2>Ignorance and product delays</h2>

It is very rare to find a project that runs smoothly, where there has not been a single constraint impacting on scope, delivery or technology. There are always problems in any suitably complex software system but the problem is no matter how hard we think of the problem, no matter how much we have learned, we will be ignorant of the things that we do not know (obvious isn't it?).

<h3>This time we will know better</h3>

Well, you've worked on a project in this domain before and you've had a few problems in the previous projects but by now you're up to speed on the solution aren't you? You now know all of the problems that you are likely to encounter, don't you?

We will always assume that we do so you say "This time it will be different" and "this time we will come in on time and on budget", what could possibly go wrong?

We are pre-programmed to think in this way to assume that we are now completely prepared for something and that anything that subsequently goes wrong is "bad luck" but yet anyone else failing we often say that they were "unprepared" for the task. 

More than likely the project will go wrong due to some constraint that we have not previously encountered and mitigated in our processes. 

<h3>Ignorance reduces in steps</h3>

What happens in a project when we encounter a problem? What is the first thought? <strong>Oh!!!</strong> usually followed by a lot of swearing because we have just encountered a constraint that has invalidated out thinking. We delve deeper into the constraint and eventually we find a solution to that constraint. A bit later we get one of those <strong>Oh!!!</strong> moments again.

So, even though we don't know what is going to trip us up how can we actively seek out those constraints? Probably the fastest way is to actually try, develop something to solve the problem and see what arises, learn from the problems that you face and adapt.

<h2>Deliberate Discovery</h3>

<ul>
  <li><a href="#deliberatediscovery">Deliberate Discovery</a> how to reduce the ignorance of your team and deliver better software</li>
</ul>

<h2><a name="deliberatediscovery">Deliberate Discovery - Dan North</a></h2>

Why do projects always seem to drag on behind schedule? There always seems to be something to trip us up and delay us. Dan argues that it is not anything overtly technical that causes the constraint but ignorance, basically we cannot know what we cannot know.

We are in general ignorant of:

<ul>
  <li>The domain we are working in (we aren't domain experts after-all)</li>
  <li>The nature of the problem we are trying to solve (often people come to us with their concept of a solution rather than with the real problem)<li>
  <li>The current software, rarely are we in a position to have written all of the software we need to change</li>
  <li>New technologies that may solve the problems as the world changes so rapidly these days</li>
  <li>Organisational constraints that cause blockages</li>
</ul>

<h3>Accidental Discovery</h3>

As good as we are at software development, or as good as we are at analysis, there is the problem that we cannot know which of the constraints listed above (or even constraints that I haven't mentioned here) we are going to encounter, we do not know the details so we cannot plan for them. 

These constraints stalk us throughout a project and at the appropriate time they pounce and impede us. At that point the nice project plan might as well be thrown out of the window as we have to now abandon the path we were currently taking, or spend days/weeks working around a new impediment. This is accidental discovery, we discover too late the problems that we are facing.

<h2>Ignorance</h2>

So, assuming we have finished our first project late and over-budget but we learned a lot aout 





]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2010-11-27 18:08:52</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1291019151]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Auto Draft</title>
		<link>http://blog.ninjaferret.co.uk/?p=267</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2011-02-01 11:08:52</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>MSIL - 1. First steps</title>
		<link>http://blog.ninjaferret.co.uk/?p=4</link>
		<pubDate>Sun, 13 Dec 2009 14:32:29 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[Reflection]]></category>

		<category domain="category" nicename="reflection"><![CDATA[Reflection]]></category>

		<guid isPermaLink="false">http://ninjaferret.wordpress.com/?p=4</guid>
		<description></description>
		<content:encoded><![CDATA[In my first blog on this process I want to start simple, creating a basic calculator class that can Add and Subtract, using <strong>Reflection.Emit</strong> to give a basic introduction IL and some of the operations that I have encountered. In the subsequent blogs I will then build on this knowledge until I can achieve a specific goal of dynamically generating WCF clients at runtime.

All of the source code for this blog can be found at <a href="http://code.assembla.com/NinjaFerretDemos/subversion/nodes/Reflection/FirstSteps">here</a>.

<h3>What does IL look like?</h3>
Not knowing IL I decided that the first thing to do was to write the class in C# properly, compile it then use ILDASM to take a look at the resulting IL.

[sourcecode language="csharp" gutter="false"]
public class Calculator
{
   public int Add(int a, int b) { return a + b; }
   public int Subtract(int a, int b) { return a - b; }
}
[/sourcecode]

Just looking a the Add method for now:

<code>
.method public hidebysig instance int32  Add(int32 a,
                     int32 b) cil managed
{
  // Code size       9 (0x9)
  .maxstack  2
  .locals init ([0] int32 CS$1$0000)
  IL_0000:  nop
  IL_0001:  ldarg.1
  IL_0002:  ldarg.2
  IL_0003:  add
  IL_0004:  stloc.0
  IL_0005:  br.s       IL_0007
  IL_0007:  ldloc.0
  IL_0008:  ret
} // end of method TestCalculator::Add
</code>

What does this all mean?

<ul>
	<li><strong>.maxstack 2</strong> tells the runtime to expect a maximum of 2 items on the stack during the execution of this method.</li>
	<li><strong>.locals init ([0] int32 CS$1$0000)</strong> creates a new local variable of type <strong>Int32</strong> that will hold the result of the sum.</li>
	<li><strong>IL_0000:  nop</strong> is an empty operation that does not have any affect on the system.</li>
	<li><strong>IL_0001:  ldarg.1</strong> pushes argument 1 onto the stack - note that argument 0 for an instance method is the <strong>this</strong> parameter.</li>
	<li><strong>IL_0002:  ldarg.2</strong> pushes argument 2 onto the stack.</li>
	<li><strong>IL_0003:  add</strong> pops the two integers on the stack and adds them together, putting the result onto the stack.</li>
	<li><strong>IL_0004:  stloc.0</strong> pops the item on the stack and stores it into the local variable at location 0 (defined above).</li>
	<li><strong>IL_0005:  br.s       IL_0007</strong> transfers execution to the specified location. In my opinion it is almost redundant in this case as execution is being transferred to the next statement.</li>
	<li><strong>IL_0007:  ldloc.0</strong> loads the value from the local variable and pushes it onto the stack</li>
	<li><strong>IL_0008:  ret</strong> returns the value on the stack back to the caller</li>
</ul>
<h3>Generating this at runtime...</h3>

I am now ready to begin auto-generating the above IL and I will be using the following basic pattern:
<ol>
	<li>Create a dynamic assembly to hold the new types</li>

	<li>Create the <strong>TypeBuilder</strong> to generate the type</li>
	<li>Create each required method using a <strong>MethodBuilder</strong></li>
	<li>Create the actual type</li>
</ol>

<h4>1. Creating the dynamic assembly</h4>

Before starting to generate types I have to first create an assembly and module in which to hold them:

[sourcecode language="csharp" gutter="false"]
var assemblyName = new AssemblyName {Name = &quot;Calculator&quot;};
var assemblyBuilder = Thread.GetDomain().DefineDynamicAssembly(assemblyName,
                            AssemblyBuilderAccess.RunAndSave);
var modBuild = assemblyBuilder.DefineDynamicModule(&quot;CalculatorModule&quot;,
                    string.Format(&quot;{0}.dll&quot;, assemblyName.Name)
[/sourcecode]

This simply defines a new dynamic assembly the <strong>AssemblyBuilderAccess.RunAndSave</strong> allows the code to be both executed and saved as an assembly to the file system. It does not automatically save the assembly, I will come to that later, but the ability to save can come in very handy when debugging the generated code. An alternative is to use <strong>AssemblyBuilderAccess.Run</strong> which will simply allow the assembly to be executed in memory.

(Note: I would normally suffix the assembly name with a GUID or timestamp so that it can be uniquely identified, especially if saving to the file system)

<h4>2. Create the TypeBuilder</h4>

The <strong>ModuleBuilder.DefineType()</strong> method is used to create the type builder:

[sourcecode language="csharp" gutter="false"]
var typeBuilder = modBuild.DefineType(&quot;Calculator&quot;,
                          TypeAttributes.Public |
                          TypeAttributes.Class |
                          TypeAttributes.AutoLayout |
                          TypeAttributes.AnsiClass |
                          TypeAttributes.BeforeFieldInit);
[/sourcecode]

The <strong>TypeAttributes</strong> were simply taken from what ILDASM was showing me from my compiled implementation of this code. We can see that this is now a public class but there are a few interesting attributes here that I had not seen before:

<ul>
	<li><strong>TypeAttributes.AutoLayout</strong> specifies that the fields are automatically laid out by the Common Language Runtime.</li>
	<li><strong>TypeAttributes.AnsiLayout</strong> tells the underlying runtime that LPSTR is to be interpreted as an ANSI string.</li>
	<li><strong>TypeAttributes.BeforeFieldInit</strong> states that calling static methods of the type does not force the system to initialize the type.</li>
</ul>

<h4>3. Create the methods</h4>

Methods are created using the <strong>TypeBuilder.DefineMethod()</strong> method to create a <strong>MethodBuilder</strong> and then using the <strong>MethodBuilder.GetILGenerator()</strong> method to retrieve the object that we will use to generate the code:

[sourcecode language="csharp" gutter="true" highlight="5,8,14,15"]
var methodBuilder = typeBuilder.DefineMethod(&quot;Add&quot;,
                    MethodAttributes.Public | MethodAttributes.Final);
methodBuilder.SetReturnType(typeof(int));
methodBuilder.SetParameters(new[] {typeof (int), typeof (int)});
methodBuilder.InitLocals = true;

var il = methodBuilder.GetILGenerator();
var label = il.DefineLabel();
il.DeclareLocal(typeof (int));
il.Emit(OpCodes.Ldarg_1);
il.Emit(OpCodes.Ldarg_2);
il.Emit(OpCodes.Add);
il.Emit(OpCodes.Stloc_0);
il.Emit(OpCodes.Br_S, label);
il.MarkLabel(label);
il.Emit(OpCodes.Ldloc_0);
il.Emit(OpCodes.Ret);
[/sourcecode]

Hopefully, the first few lines are self-explanatory, define the method with the set attributes (I'll explore method attributes in more detail in a later post) then set the parameters and return type.

On line 5 the <strong>methodBuilder.InitLocals = true</strong> tells the runtime to automatically initialises local variables to zero.

The following lines are simply emitting the operation codes identified in the IL that I generated above. Where you see "_1", "_2" etc. suffixes there is a more generic version where you can pass a <strong>short</strong> as the second parameter to <strong>il.Emit()</strong> e.g. <strong>il.Emit(OpCodes.Ldarg_1)</strong> can be written <strong>il.Emit(OpCodes.Ldarg, (short)1)</strong>.

Lines 8, 14 and 15 show how to transfer the execution to another point. I have defined a label on line 5 then when I emit the break in execution on line 14 to tell the code to jump to that label but the label is not yet associated with a position in the IL, this happens on line 15 where I mark the label's position.

Now that the Add method has been defined I repeat almost the same IL for the subtract method but use  <strong>OpCodes.Sub</strong> instead of <strong>OpCodes.Add</strong>.

<h4>4. Produce the type</h4>
So all that is left to do is to create the type and test it:

[sourcecode language="csharp" gutter="false"]
var calculatorType = typeBuilder.CreateType();

var obj = Activator.CreateInstance(calculatorType);

var addMethod = calculatorType.GetMethod(&quot;Add&quot;, new[] {typeof (int), typeof (int)});
Console.WriteLine(&quot;1 + 2 = {0}&quot;, addMethod.Invoke(obj, new object[] {1, 2}));

var subtractMethod = calculatorType.GetMethod(&quot;Subtract&quot;, new[] { typeof(int), typeof(int) });
Console.WriteLine(&quot;10 + 7 = {0}&quot;, subtractMethod.Invoke(obj, new object[] { 10, 7 }));
[/sourcecode]

I simply call <strong>typeBuilder.CreateType()</strong> once everything is defined to create the type and begin to use it.

However, the remaining code is very ugly simply because at the time the application is compiled the type has not been created so the compiler does not know what methods this type will have; this leaves us using reflection to call all of the methods.

What would be nicer is if we could have a known interface and automatically generate the implementation using <strong>Reflection.Emit</strong> and that will be the topic of my next post.

<h3>Finally...</h3>
If you take anything away from this blog post is that you should not be scared of <strong>Reflection.Emit</strong>, by creating a real class that is close to the implementation that you want you can identify what operations you need to do the job.

Over the coming blog posts things will get more complicated and more useful, hopefully, as I move towards a real-world use of runtime-class generation.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>4</wp:post_id>
		<wp:post_date>2009-12-13 14:32:29</wp:post_date>
		<wp:post_date_gmt>2009-12-13 14:32:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>first-steps-into-msil</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1260814519]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[11235901]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>MSIL - 2. Implementing Interfaces</title>
		<link>http://blog.ninjaferret.co.uk/?p=25</link>
		<pubDate>Mon, 14 Dec 2009 16:56:16 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[Reflection]]></category>

		<category domain="category" nicename="reflection"><![CDATA[Reflection]]></category>

		<guid isPermaLink="false">http://ninjaferret.wordpress.com/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[Following on from my previous blog post I intend to show you how to take the basics that I presented and extend them to become much more useful. One of the problems with the previous example was that there was absolutely no way when writing the test code to use the object that had been dynamically created without using even more reflection. The answer to this is to start implementing interfaces so that the compiled code knows the interface for the dynamically generated methods.

Once again, all of the source code can be downloaded from the <a href="http://code.assembla.com/NinjaFerretDemos/subversion/nodes/Reflection/Interfaces">here</a>.

<h3>The interface</h3>
I am going to continue on with the Calculator theme:

[sourcecode language="csharp" gutter="true"]
public interface Calculator
{
	int Add(int a, int b);
	int Subtract(int a, int b);
	int Multiply(int a, int b);
	int Divide(int numerator, int denominator);
}
[/sourcecode]

<h3>Implementing a method</h3>
In my last blog post I showed you how to create a method using <strong>Reflection.Emit</strong>, so staying with the <strong>Add()</strong> method I will show you how I would create the method based on the interface. The IL inside the method will not change so the primary changes will come from simply defining the method.

<h4>1. Mark the class as implementing the interface</h4>

[sourcecode language="csharp" gutter="true"]
var interfaceType = typeof(Calculator);
...
typeBuilder.AddInterfaceImplementation(interfaceType);
[/sourcecode]

<h4>2. Define the method</h4>
The definition of the method is almost identical to the definition of the method shown in the previous post:

[sourcecode language="csharp" gutter="true"]
var interfaceAddMethod = interfaceType.GetMethod(&quot;Add&quot;);

var methodBuilder = typeBuilder.DefineMethod(&quot;Add&quot;, MethodAttributes.Public |
                    MethodAttributes.Virtual |
                    MethodAttributes.Final |
                    MethodAttributes.NewSlot |
                    MethodAttributes.HideBySig);
methodBuilder.SetReturnType(interfaceAddMethod.ReturnType);
var parameters = interfaceAddMethod
    .GetParameters()
    .Select(parameter =&gt; parameter.ParameterType)
    .ToArray();
methodBuilder.SetParameters(parameters);
...
var il = methodBuilder.GetILGenerator();
...
typeBuilder.DefineMethodOverride(methodBuilder, interfaceAddMethod);
[/sourcecode]

One of the most interesting things that have discovered on my journey through IL I realised that the implementing method is marked as <strong>Virtual</strong> and <strong>Final</strong> in order to implement the interface. The attribute <strong>HideBySig</strong> indicates that this method hides all methods in base classes and interfaces with the same signature and the attribute <strong>NewSlot</strong> tells the compiler to allocate a new spot in the V-Table.

A lot of work has already been done for us in defining the interface, the parameters and the return type are defined for us. After generating the IL for the method there is one final call to make <strong>typeBuilder.DefineMethodOverride()</strong> passing in the generated method and the method from the interface that it is overriding.

<h4>3. Defining Multiply and Divide as Not Implemented</h4>
For now I do not need to implement these methods and I would like to throw a <strong>NotImplementedException</strong> rather than worrying about writing the IL now. The method bodies become very simple:

[sourcecode language="csharp" gutter="true"]
var il = methodBuilder.GetILGenerator();
il.Emit(OpCodes.Ldstr, &quot;The Multiply method has not been implemented yet&quot;);
il.Emit(OpCodes.Newobj, typeof(NotImplementedException).GetConstructor(new [] {typeof(string)}));
il.Emit(OpCodes.Throw);
[/sourcecode]

It simply pushes the string onto the stack and uses it to create a new exception that is then immediately throws.

<h3>What is next?</h3>
I have shown you how to implement an interface and the basic mechanisms of creating a new object (in this case an exception). The next stage is to take the calculator implementation further using the <strong>Divide</strong> method which will take us into writing an <strong>if</strong> statement to detect if the denominator is 0.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2009-12-14 16:56:16</wp:post_date>
		<wp:post_date_gmt>2009-12-14 16:56:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>msil-2-implementing-interfaces</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1260821560]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[11235901]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>safecss</title>
		<link>http://blog.ninjaferret.co.uk/?p=32</link>
		<pubDate>Mon, 14 Dec 2009 17:17:14 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[Uncategorized]]></category>

		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>

		<guid isPermaLink="false">http://ninjaferret.wordpress.com/2009/12/14/safecss/</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2009-12-14 17:17:14</wp:post_date>
		<wp:post_date_gmt>2009-12-14 17:17:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>safecss</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>safecss</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>MSIL - 3. If Statements...</title>
		<link>http://blog.ninjaferret.co.uk/?p=43</link>
		<pubDate>Sat, 19 Dec 2009 10:00:45 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[Reflection]]></category>

		<category domain="category" nicename="reflection"><![CDATA[Reflection]]></category>

		<guid isPermaLink="false">http://ninjaferret.wordpress.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[For my third post in the MSIL series I want to focus on a simple if statement, how do I represent the code <strong>if (x != 0)</strong> using IL?

The source code for this can be found in my <a href="http://code.assembla.com/NinjaFerretDemos/subversion/nodes/Reflection/If">subversion repository</a>.

<h3>Implementing division</h3>

I want to take a look at the <strong>Divide()</strong> method of the Calculator class:

[sourcecode language="csharp" gutter="true"]
public int Divide(int numerator, int denominator)
{
	if (denominator != 0)
	{
		throw new ArgumentException(&quot;denominator cannot be zero&quot;,
		                            &quot;denominator&quot;);
	}
	return numerator/denominator;
}
[/sourcecode]

This gives me the opportunity to show the implementation of conditional statements and the throwing of exceptions. What would this implementation generate in IL terms for handling the equality?

<code>
.method public hidebysig newslot virtual final
        instance int32  Divide(int32 numerator,
                               int32 denominator) cil managed
{
  // Code size       37 (0x25)
  .maxstack  3
  .locals init ([0] int32 CS$1$0000,
           [1] bool CS$4$0001)
  IL_0000:  nop
  IL_0001:  ldarg.2
  IL_0002:  ldc.i4.0
  IL_0003:  ceq
  IL_0005:  ldc.i4.0
  IL_0006:  ceq
  IL_0008:  stloc.1
  IL_0009:  ldloc.1
  IL_000a:  brtrue.s   IL_001d
  IL_000c:  nop
  IL_000d:  ldstr      "denominator cannot be zero"
  IL_0012:  ldstr      "denominator"
  IL_0017:  newobj     instance void [mscorlib]System.ArgumentException::.ctor(string,
                                                                               string)
  IL_001c:  throw
  IL_001d:  ldarg.1
  IL_001e:  ldarg.2
  IL_001f:  div
  IL_0020:  stloc.0
  IL_0021:  br.s       IL_0023
  IL_0023:  ldloc.0
  IL_0024:  ret
} // end of method CalculatorImplementation::Divide
</code>

The <strong>if</strong> statement is executed between <strong>IL_0001</strong> and <strong>IL000a</strong>. The first thing is to push onto the stack the demoninator (<strong>ldarg.2</strong>) and the constant integer zero (<strong>ldc.i4.0</strong>) then compare them using the equals comparison operator (<strong>ceq</strong>), which pushes either a <strong>1</strong> onto the stack if it is true and <strong>0</strong> if it is false. As I am doing a <strong>not equals</strong> comparison we then compare the result of the first comparison with <strong>0</strong> to find out if the two items do not match, the result of this equality is placed back onto the stack.

What do we know now? <strong>brtrue.s   IL_001d</strong> tells the compiler that if the calculation above (i.e. is the denominator not equal to zero) is true then jump past the exception throwing statements to the calculation part at position <strong>IL001d</strong> that follows the standard pattern of the Add and Subtract methods described in my first post.


The resulting IL looks like:

[sourcecode language="csharp" gutter="true"]
private static void DefineDivideMethod(TypeBuilder typeBuilder, Type interfaceType)
{
	var interfaceSubtractMethod = interfaceType.GetMethod(&quot;Divide&quot;);
	var methodBuilder = typeBuilder.DefineMethod(&quot;Divide&quot;,
             MethodAttributes.Public |
             MethodAttributes.Virtual |
             MethodAttributes.Final |
             MethodAttributes.NewSlot |
             MethodAttributes.HideBySig);
	methodBuilder.SetReturnType(interfaceSubtractMethod.ReturnType);
	var parameters = interfaceSubtractMethod
             .GetParameters()
             .Select(parameter =&gt; parameter.ParameterType)
             .ToArray();
	methodBuilder.SetParameters(parameters);
	methodBuilder.InitLocals = true;

	var il = methodBuilder.GetILGenerator();
	var returnLabel = il.DefineLabel();
	var trueLabel = il.DefineLabel();
	il.DeclareLocal(typeof (int));
	il.DeclareLocal(typeof (bool));
	il.Emit(OpCodes.Nop);
	il.Emit(OpCodes.Ldarg_2);
	il.Emit(OpCodes.Ldc_I4_0);
	il.Emit(OpCodes.Ceq);
	il.Emit(OpCodes.Ldc_I4_0);
	il.Emit(OpCodes.Ceq);
	il.Emit(OpCodes.Stloc_1);
	il.Emit(OpCodes.Ldloc_1);
	il.Emit(OpCodes.Brtrue_S, trueLabel);
	il.Emit(OpCodes.Nop);
	il.Emit(OpCodes.Ldstr, &quot;denominator cannot be zero&quot;);
	il.Emit(OpCodes.Ldstr, &quot;demoninator&quot;);
	il.Emit(OpCodes.Newobj, typeof (ArgumentException).GetConstructor(new[] {typeof (string), typeof (string)}));
	il.Emit(OpCodes.Throw);
	il.MarkLabel(trueLabel);
	il.Emit(OpCodes.Ldarg_1);
	il.Emit(OpCodes.Ldarg_2);
	il.Emit(OpCodes.Div);
	il.Emit(OpCodes.Stloc_0);
	il.Emit(OpCodes.Br_S, returnLabel);
	il.MarkLabel(returnLabel);
	il.Emit(OpCodes.Ldloc_0);
	il.Emit(OpCodes.Ret);
	typeBuilder.DefineMethodOverride(methodBuilder, interfaceSubtractMethod);
}
[/sourcecode]

So there it is, a simple if statement. The IL is starting to look increasingly complicated and it is becoming very clear that trying to dynamically generate code for anything but simple methods is increasingly difficult. What I will go onto in the very next post is how to do a simple loop to complete the fundamentals of programming.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2009-12-19 10:00:45</wp:post_date>
		<wp:post_date_gmt>2009-12-19 10:00:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>msil-3-if-statements</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1283260287]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[11235901]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>MSIL - 4. For Loops</title>
		<link>http://blog.ninjaferret.co.uk/?p=49</link>
		<pubDate>Wed, 23 Dec 2009 10:00:11 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[Reflection]]></category>

		<category domain="category" nicename="reflection"><![CDATA[Reflection]]></category>

		<guid isPermaLink="false">http://ninjaferret.wordpress.com/?p=49</guid>
		<description></description>
		<content:encoded><![CDATA[So for completeness I thought that I would introduce you to basic loops, although I have no need of them in my intended use of <strong>Reflection.Emit</strong>. I am going to finish off my Calculator implementation by non-optimal implementation of the multiply method, I could make use of the <strong>OpCodes.Mul</strong> operator in the same way as I have used <strong>OpCodes.Add</strong> etc. but this would not demonstrate a basic for loop. As part of this I will also demonstrate calling a method of the generated class.

The source code for this can be found in my <a href="http://code.assembla.com/NinjaFerretDemos/subversion/nodes/Reflection/ForLoop">subversion repository</a>.

<h3>Implementing Multiply</h3>
I can create a loop that will make use of the <strong>Add()</strong> method to calculate the multiplication:

[sourcecode language="csharp" gutter="true"]
public int Multiply(int a, int b)
{
	int result = 0;
	for (int i = a; i &gt; 0; i--)
	{
		result = Add(result, b);
	}
	return result;
}
[/sourcecode]

So taking a look at ILDASM:

<code>
.method public hidebysig newslot virtual final
        instance int32  Multiply(int32 a,
                                 int32 b) cil managed
{
  // Code size       36 (0x24)
  .maxstack  3
  .locals init ([0] int32 result,
           [1] int32 i,
           [2] int32 CS$1$0000,
           [3] bool CS$4$0001)
  IL_0000:  nop
  IL_0001:  ldc.i4.0
  IL_0002:  stloc.0
  IL_0003:  ldarg.1
  IL_0004:  stloc.1
  IL_0005:  br.s       IL_0016
  IL_0007:  nop
  IL_0008:  ldarg.0
  IL_0009:  ldloc.0
  IL_000a:  ldarg.2
  IL_000b:  call       instance int32 Inheritance.CalculatorImplementation::Add(int32,
                                                                                int32)
  IL_0010:  stloc.0
  IL_0011:  nop
  IL_0012:  ldloc.1
  IL_0013:  ldc.i4.1
  IL_0014:  sub
  IL_0015:  stloc.1
  IL_0016:  ldloc.1
  IL_0017:  ldc.i4.0
  IL_0018:  cgt
  IL_001a:  stloc.3
  IL_001b:  ldloc.3
  IL_001c:  brtrue.s   IL_0007
  IL_001e:  ldloc.0
  IL_001f:  stloc.2
  IL_0020:  br.s       IL_0022
  IL_0022:  ldloc.2
  IL_0023:  ret
} // end of method CalculatorImplementation::Multiply
</code>

The first thing is that we now have 4 local variables:
<ul>
   <li><strong>[0] int32 result</strong> - the integer variable to hold the <em>result</em></li>
   <li><strong>[1] int32 i</strong> - the integer variable to hold the <em>loop counter</em></li>
   <li><strong>[2] int32 CS$1$0000</strong> - an integer variable, created by the compiler, that holds the <em>return value</em></li>
   <li><strong>[3] bool CS$4$0001</strong> - a boolean variable, created by the compiler, that holds the result of the <em>loop condition</em> <code>for(int i = a; <strong>i &gt; 0</strong>; i--)</code></li>
</ul>

Initially, the <em>result</em> variable is assigned the constant 0 (<strong>OpCodes.Ldc_I4_0</strong>) and the <em>loop counter</em> is assigned the value of the first parameter (<strong>OpCodes.Ldarg_1</strong>). The IL then switches execution to the location <strong>IL0016</strong> that executes the condition and stores the result of that condition into the <em>loop condition</em> variable. If the <em>loop condition</em> variable is true execution then returns to location <strong>IL0007</strong> to execute the main body of the loop. Note the use of the <strong>OpCodes.Cgt - greater than</strong> code.

In the main body of the loop the <strong>this</strong> parameter (parameter 0) is pushed onto the stack followed by the current <em>result</em> variable and the second parameter. The stack is now set-up for a call into the <strong>Add</strong> method and the result is stored into the <em>result</em> variable. The <em>loop counter</em> variable is then decremented and the condition is evaluated once more.

When the <em>loop condition</em> is false, the <em>result variable</em> is stored into the <em>return</em> variable which is then returned to the caller.

So putting this into code:

[sourcecode language="csharp" gutter="true"]
private static void DefineMultiplyMethod(TypeBuilder typeBuilder, Type interfaceType)
{
	var interfaceMethod = interfaceType.GetMethod(&quot;Multiply&quot;);
	var addMethod = interfaceType.GetMethod(&quot;Add&quot;);
	var addParameters = addMethod
		.GetParameters()
		.Select(parameter =&gt; parameter.ParameterType)
		.ToArray();
	var methodBuilder = typeBuilder.DefineMethod(&quot;Multiply&quot;,
                             MethodAttributes.Public |
                             MethodAttributes.Virtual |
                             MethodAttributes.Final |
                             MethodAttributes.NewSlot |
                             MethodAttributes.HideBySig);
	methodBuilder.SetReturnType(interfaceMethod.ReturnType);
	var parameters = interfaceMethod
                             .GetParameters()
                             .Select(parameter =&gt; parameter.ParameterType)
                             .ToArray();
	methodBuilder.SetParameters(parameters);
	methodBuilder.InitLocals = true;

	var il = methodBuilder.GetILGenerator();
	var returnLabel = il.DefineLabel();
	var decisionLabel = il.DefineLabel();
	var loopStartLabel = il.DefineLabel();
	il.DeclareLocal(typeof(int));
	il.DeclareLocal(typeof(int));
	il.DeclareLocal(typeof(int));
	il.DeclareLocal(typeof(bool));
	il.Emit(OpCodes.Nop);
	il.Emit(OpCodes.Ldc_I4_0);
	il.Emit(OpCodes.Stloc_0);
	il.Emit(OpCodes.Ldarg_1);
	il.Emit(OpCodes.Stloc_1);
	il.Emit(OpCodes.Br_S, decisionLabel);
	il.MarkLabel(loopStartLabel);
	il.Emit(OpCodes.Nop);
	il.Emit(OpCodes.Ldarg_0);
	il.Emit(OpCodes.Ldloc_0);
	il.Emit(OpCodes.Ldarg_2);
	il.EmitCall(OpCodes.Call, addMethod, addParameters);
	il.Emit(OpCodes.Stloc_0);
	il.Emit(OpCodes.Nop);
	il.Emit(OpCodes.Ldloc_1);
	il.Emit(OpCodes.Ldc_I4_1);
	il.Emit(OpCodes.Sub);
	il.Emit(OpCodes.Stloc_1);
	il.MarkLabel(decisionLabel);
	il.Emit(OpCodes.Ldloc_1);
	il.Emit(OpCodes.Ldc_I4_0);
	il.Emit(OpCodes.Cgt);
	il.Emit(OpCodes.Stloc_3);
	il.Emit(OpCodes.Ldloc_3);
	il.Emit(OpCodes.Brtrue_S, loopStartLabel);
	il.Emit(OpCodes.Ldloc_0);
	il.Emit(OpCodes.Stloc_2);
	il.MarkLabel(returnLabel);
	il.Emit(OpCodes.Ldloc_2);
	il.Emit(OpCodes.Ret);
	typeBuilder.DefineMethodOverride(methodBuilder, interfaceMethod);
}
[/sourcecode]

I now have a fully functional and fully working calculator class that implements the <strong>Calculator</strong> interface and has been generated dynamically at runtime.

Next time, I will be looking into lambda expressions...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>49</wp:post_id>
		<wp:post_date>2009-12-23 10:00:11</wp:post_date>
		<wp:post_date_gmt>2009-12-23 10:00:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>msil-4-for-loops</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1260837111]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[11235901]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>MISL - 5. Lambda Expressions</title>
		<link>http://blog.ninjaferret.co.uk/?p=57</link>
		<pubDate>Mon, 04 Jan 2010 22:34:56 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[Reflection]]></category>

		<category domain="category" nicename="reflection"><![CDATA[Reflection]]></category>

		<guid isPermaLink="false">http://ninjaferret.wordpress.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[This is the last of the "tutorial" posts on MSIL. There is a massive amount that I have not had time to cover here but this is, as I said in my first post, the story of my journey through MSIL. You will find the source code for this blog post on my <a href="http://code.assembla.com/NinjaFerretDemos/subversion/nodes/Reflection/LambdaExpressions">subversion repository</a>.

For this one last time I want to carry on the Calculator for one final time. This time I want to explore the use of Lambda expressions and to introduce a pattern similar to the one that I will make use of in later posts.

The implementation of the Calculator interface then looks identical for each method:

[sourcecode language="csharp" gutter="true"]
// Generated class
public class Calc : Calculator
{
	public int Add(int a, int b)
	{
		int result = 0;
		Evaluator.Evaluate(() =&gt; result = a + b);
		return result;
	}

	...
}

public delegate void CalcFunction(int a, int b);

public static class Evaluator
{
	public static void Evaluate(CalcFunction codeBlock)
	{
		codeBlock();
	}
}
[/sourcecode]

<h3>Defining the Lambda Expression</h3>

As always, the first task is to make a test implementation in order use ILDASM to see what has been generated. Looking at the generated type <strong>TestCalculator</strong> there are four nested types:

<ul>
    <li>&lt;&gt;__DisplayClass1</li>
	<li>&lt;&gt;__DisplayClass4</li>
	<li>&lt;&gt;__DisplayClass7</li>
	<li>&lt;&gt;__DisplayClassa</li>
</ul>

These are the internal representation of the lambda expressions. Each lambda expression has it's own class nested inside the class in which it was defined so it is necessary to generate these nested types using IL. For the most part how a nested type is created is very similar to creating a normal type, it is only how the <strong>TypeBuilder</strong> is created that is different using the method <strong>typeBuilder.DefineNestedType(string.Format("&lt;&gt;__DisplayClass{0}", index, NestedTypeAttributes);</strong>.

The nested types each have three public fields <strong>a</strong>, <strong>b</strong> and <strong>result</strong>; based on the lambda expression <strong>() =&gt; result = a + b</strong> it should be easy to see where these fields have been derived from.

Finally, there is the method which again has a special format, e.g. <strong>&lt;Add&gt;b__0</strong> and <strong>&lt;Subtract&gt;b__3</strong>, which has again been auto-generated based on the name of the method that the lambda expression was defined in and an incrementing number to permit uniqueness. The IL for these methods is very simple, load the two fields (<strong>a</strong> and <strong>b</strong>) add/subtract/divide/multiple and save the result in the <strong>result</strong> field.

The <strong>DefineLambdaExpression</strong> method in my example code creates the nested type, defines the default constructor, defines the fields and implements the method. The final act is to then create the nested type using the <strong>TypeBuilder.CreateType()</strong> method.

<h4>Why can't I use the generated type yet?</h4>

Once the nested type has been created it must surely be a usable type? When generating the code that will call this lambda expression I initially expected to be able to use <strong>Type.GetConstructor()</strong>, <strong>Type.GetMethod()</strong> and <strong>Type.GetField()</strong> to get access to the required members of the lambda expression. I was wrong, the first thing I needed to do was to delcare a local of the lambda expression type but I get the exception:

<code>
System.TypeLoadException: Could not load type 'Calculator' from assembly 'Calculatorb1d3a726-fa47-47cc-b190-ff5403de4ad7, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null'.
   at System.RuntimeTypeHandle.GetDeclaringType(RuntimeType type)
   at System.RuntimeType.RuntimeTypeCache.GetEnclosingType()
   at System.RuntimeType.get_DeclaringType()
   at System.Reflection.Emit.ModuleBuilder.GetTypeRefNested(Type type, Module refedModule, String strRefedModuleFileName)
   at System.Reflection.Emit.ModuleBuilder.GetTypeTokenWorkerNoLock(Type type, Boolean getGenericDefinition)
   at System.Reflection.Emit.ModuleBuilder.GetTypeTokenInternal(Type type, Boolean getGenericDefinition)
   at System.Reflection.Emit.SignatureHelper.AddOneArgTypeHelperWorker(Type clsArgument, Boolean lastWasGenericInst)
   at System.Reflection.Emit.SignatureHelper.AddArgument(Type argument, Boolean pinned)
   at System.Reflection.Emit.ILGenerator.DeclareLocal(Type localType, Boolean pinned)
   at System.Reflection.Emit.ILGenerator.DeclareLocal(Type localType)
   at LambdaExpressions.Program.DefineMethod(MethodInfo method, TypeBuilder typeBuilder, LambdaExpressionDetails lambdaExpression) in D:\code\dotNet\BlogDemos\Reflection\LambdaExpressions\Program.cs:line 150
   at LambdaExpressions.Program.Main(String[] args) in D:\code\dotNet\BlogDemos\Reflection\LambdaExpressions\Program.cs:line 54
</code>

So, even though the nested type has compiled it cannot be used directly until the containing type has been fully defined, but the containing type is the one that I am still building. Thankfully, <strong>TypeBuilder</strong> inherits <strong>Type</strong> so I can simply use the <strong>TypeBuilder</strong> when declaring the local variable.

The same occurs trying to use the <strong>Type.GetConstructor()</strong>, <strong>Type.GetMethod()</strong> or <strong>Type.GetField()</strong> methods on either the created type or on the <strong>TypeBuilder</strong>. However, when creating each of these members the appropriate method used returns a <strong>XXXBuilder</strong> object that inherits from its equivalent and can be used in its place:

<ul>
    <li><strong>ConstructorBuilder</strong> inherits <strong>ConstructorInfo</strong></li>
	<li><strong>MethodBuilder</strong> inherits <strong>MethodInfo</strong></li>
	<li><strong>FieldBuilder</strong> inherits <strong>FieldInfo</strong></li>
</ul>

Hence, the <strong>DefineLambdaExpression</strong> method, stores these objects in a <strong>LambdaExpressionDetails</strong> object that can be passed on to the method where the call into this lambda expression will be made.

<h3>Making the call</h3>

The creation of the type and the initial definition of the methods of the <strong>ICalculator</strong> interface should be identical to that in previous posts; it is only the implementation that will differ.

The four methods again look very similar, the only difference between them is the lambda expression that they are using:

[sourcecode language="csharp" gutter="true"]
var result = 0;
Evaluator.Evaluate(() =&gt; result = a * b);
return result;
[/sourcecode]

As before, the test implementation and ILDASM shows how the calling method is constructed. The contents of each method can be distilled to the following (ignoring what has gone before in previous posts):

<ul>
   <li>Declare a <em>lamdba expression</em> local variable </li>
   <li>Declare the <em>result</em> local variable</li>
   <li>Create a new instance of the lambda expression using the <strong>LambdaExpressionDetails.Constructor</strong> property</li>
   <li>Save it to the <em>lambda expression</em> local variable</li>
   <li>For each argument:
      <ul>
	     <li>Push the <em>lambda expression</em> local variable onto the stack</li>
		 <li>Push the appropriate argument onto the stack</li>
		 <li>Store the value into the appropriate field on the lambda expression using the <strong>LambdaExpressionDetails.Method</strong> property</li>
	  </ul>
   </li>
   <li>Load the <em>lambda expression</em> local variable</li>
   <li>Load the function pointer to the method of the lambda expression using </li>
   <li>Create a new instance of the <strong>CalcFunction</strong> delegate</li>
   <li>Call the <strong>Evaluator.Evaluate()</strong> method</li>
   <li>Load the result field</li>
   <li>Return the result</li>
</ul>

So the IL becomes:

[sourcecode language="csharp" gutter="true"][/sourcecode]
// Create the lambda expression object
il.Emit(OpCodes.Newobj, lambdaExpressionDetails.Constructor);
il.Emit(OpCodes.Stloc_0);

// Load all of the parameters into the lambda expression's fields
il.Emit(OpCodes.Ldloc_0);
il.Emit(OpCodes.Ldarg_1);
il.Emit(OpCodes.Stfld, lambdaExpressionDetails.ParameterFields.SingleOrDefault(x =&gt; x.Name.Equals("a")));
il.Emit(OpCodes.Ldloc_0);
il.Emit(OpCodes.Ldarg_2);
il.Emit(OpCodes.Stfld, lambdaExpressionDetails.ParameterFields.SingleOrDefault(x =&gt; x.Name.Equals("b")));
il.Emit(OpCodes.Nop);

// Set up the return value
il.Emit(OpCodes.Ldloc_0);
il.Emit(OpCodes.Ldc_I4_0);
il.Emit(OpCodes.Stfld, lambdaExpressionDetails.ResultField);

// Make the call
il.Emit(OpCodes.Ldloc_0);
il.Emit(OpCodes.Ldftn, lambdaExpressionDetails.Method);
var constructorInfo = typeof(EvaluationDelegate).GetConstructor(new[] { typeof(object), typeof(IntPtr) });
il.Emit(OpCodes.Newobj, constructorInfo);
var methodInfo = typeof(Evaluator).GetMethod("Evaluate", new[] { typeof(EvaluationDelegate) });
il.Emit(OpCodes.Call, methodInfo);
il.Emit(OpCodes.Ldloc_0);
il.Emit(OpCodes.Ldfld, lambdaExpressionDetails.ResultField);
il.Emit(OpCodes.Stloc_1);
il.Emit(OpCodes.Br_S, label);
il.MarkLabel(label);
il.Emit(OpCodes.Ldloc_1);
il.Emit(OpCodes.Ret);
[/sourcecode

<h3>Finally...</h3>
Today, I have shown that lambda expressions are really nothing special under the hood, from what I can tell there are no features of <strong>MSIL</strong> that make lambda expressions possible, they are made possible through features of the languages and the compilers that produce <strong>MSIL</strong>. By investigating the structure of the generated <strong>MSIL</strong> for this one case I hope to have demonstrated the principles behind dynamically generating your own lambda expressions for a variety of other cases.

That is it for my investigation into <strong>MSIL</strong> and <strong>Refleciton.Emit</strong>. My guiding principles throughout these tutorials has been to make an example of what I wish to produce then use <strong>ILDASM</strong> to break the compiled assembly down into <strong>MSIL</strong> to gain an understanding of what is produced. I hope that these tutorials will prove useful to anyone trying to make use of <strong>Reflection.Emit</strong> but I hope that when I have achieved my ultimate goal (a generic WCF Service Client factory) will prove valuable and that will be the topic of my next blog post.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2010-01-04 22:34:56</wp:post_date>
		<wp:post_date_gmt>2010-01-04 22:34:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>misl-5-lambda-expressions</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[11235901]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1262644502]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>DDD8</title>
		<link>http://blog.ninjaferret.co.uk/?p=60</link>
		<pubDate>Mon, 01 Feb 2010 01:53:42 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[Conferences]]></category>

		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>

		<category><![CDATA[DDD8]]></category>

		<category domain="category" nicename="ddd8-developerdeveloperdeveloper-conferences"><![CDATA[DDD8]]></category>

		<guid isPermaLink="false">http://ninjaferret.wordpress.com/?p=60</guid>
		<description></description>
		<content:encoded><![CDATA[I believe that I was one of the lucky ones who managed to get a place at <strong>DeveloperDeveloperDeveloper 8</strong> (<strong>DDD8</strong>) at the Microsoft Campus in Reading. I say I was lucky because I believe that the 400 available places were snapped up in 12 minutes and another 200 people were put on the reserve list within the next 12 minutes. Sadly, I had to get the first train of the day to get to Reading.

There were a lot of different sessions that I wanted to attend but I could be at only attend one session at a time as I haven't yet mastered the ability of being in multiple places at once.

<h3>Real World MVC Architectures - Ian Cooper</h3>


I am relatively new to ASP.NET MVC and have made a number of the mistakes that Ian Cooper was talking about.

Ian explained the "Thin Controller/Fat Model" pattern where the model/domain is where the majority of the work takes place and the controller provides more of the application logic. The controller needs to gather the required data, prepare it for the view then render the appropriate view. More of the business logic needs to be pushed down into the domain, or in the case for my sites into the service layer. However, we don't want a fat service layer either so the same principle applies, the logic from there needs to be pushed down into the domain from the service.

This certainly has given me some ideas that I need to take back to work and to my home projects

<h3>Hello Document Databases - Neil Robbins</h3>

I wasn't sure whether to attend this one or go to the <strong>Multi-tenant ASP.NET MVC Projects (Or 30 very different customers and a single codebase)</strong> by Rob Ashton but since I'd been to one MVC talk I decided to look at something completely different.

In the end I think I made a good choice as Neil really gave me something to think about for my next projects at home. For a long time now RDBMS has been the "only choice" when people want to store data and to use the same quote Neil did "No one ever got fired for choosing IBM". However, they aren't that fault tolerant and don't scale well for vast distributed systems (think Google).

Document databases are designed to be more fault tolerant, they are distributed so a node can disappear without bringing the entire system down but that is at the price of data consistency. The nodes communicate with each other and diff the data but there is a latency there so should a node go down some data may be lost.

Neil focussed on <a href="http://couchdb.apache.org/">Couch DB</a> which he ran on Linux because it is easier to install (Linux at Microsoft shock!). The API is URL based and RESTful and he demonstrated it using a linux terminal and curl.

<h3>C#4.0 - Jon Skeet</h3>

Well, what can I say about this talk? Jon is a fantastic presenter and he made it so easy to understand the new features of C# 4.0.

The main purpose of this release is to improve COM interop with a primary focus on getting better interop with Microsoft Office. C# is getting a number of features that were in VB that C# has been desperately needing to help with COM interop such as <strong>Named Arguments</strong> and <strong>Default Parameters</strong>.

I found Jon's explanation of covariance and contravariance extremely easy to follow, one of the best explanations that I have come across and I would say that if the video of his talk is put online I would recommend it just for that.

<h3>Lunchtime - grok talks</h3>

At lunch I went to the grok talks and listened to topics that ranged from using CodeRush Xpress to trying to introduce Lean and Kanban into the workplace to the death of MSBuild, I'm sure I'm missing one out...

I found the Kanban talk very interesting and I need to read Chris' <a href="http://www.jobshy.com/shift-in/post/2010/01/05/Personal-Kanban.aspx">blog</a> on the subject.

Ben's talk on using <a href="http://github.com/derickbailey/Albacore">albacore</a> to automate build/deployment processes was very interested and something that I need to read about more.

<h3>Not Everything is an Object - Gary Short</h3>

I was debating to go to this talk or the entity framework talk but in the end I came to the conclusion that this sounded a little different and therefore a bit more interesting.

Gary began right at the very beginnings of programming and his talk began very much like a "brief history of everything" as he delved into discussions on quantum limitations on chip size and into quantum tunnelling.

I was intrigued by his thoughts that the reasons Object Orientation is failing to solve current world problems is that we are, in essence, trying to model something and we aren't very good modellers. He also brought us back to the concept that objects hide data whereas data structures present data but no behaviour. In some ways this links very neatly in with some of what Ian Cooper was saying in his talk earlier (about a fatter model).

Back onto the subject matter at hand, objects also have shared state that is not thread safe and as software gets more complex and processors get more cores rather than faster we need to focus on parallel processing (and threading isn't nice in the OO world).

Gary introduced a JVM based functional language called "Clojure" and gave us a brief introduction to the language and the benefits of a functional language where everything is immutable. I am seriously going to take a look at Clojure or another functional language.

<h3>Automating Testing With Windows Virtual PC - Guy Smith-Ferrier</h3>

This was one of the talks that I was interested in going to from the start as automating testing through a Virtual PC is something I am about to start looking into.

There are several ways to do most actions, Guy showed us the easy way and the hard way (e.g. auto-login on windows rather than trying to automate login - using a sequence of characters into the keyboard buffer).

This talk has given me lots to think about and ideas about how to automate the deployment and build processes using the simple methods, batch files in the start-up folder of the Virtual PC that do the install and then run the tests. I also like Guy's idea of using shared hard disks that can be used between different VPC images.

<h3>Final thoughts</h3>

Firstly, thanks very much to the organisers, speakers, helpers and sponsors for providing a phenomenal free conference. The Microsoft facilities and staff were again fantastic so thanks very much to everyone involved from Microsoft.

I have learned a lot today and have been to talks on topics that I would never have even considered looking at before and I hope to take a look at a lot of what was discussed here over the next few months.

Hopefully I'll be there next year, perhaps I might even think about doing a grok talk.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>60</wp:post_id>
		<wp:post_date>2010-02-01 01:53:42</wp:post_date>
		<wp:post_date_gmt>2010-02-01 01:53:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ddd8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1286634765]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>3</wp:comment_id>
		<wp:comment_author><![CDATA[Rory Becker]]></wp:comment_author>
		<wp:comment_author_email>RoryBecker@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://Rorybecker.Blogspot.com</wp:comment_author_url>
		<wp:comment_author_IP>86.184.14.227</wp:comment_author_IP>
		<wp:comment_date>2010-02-01 08:40:58</wp:comment_date>
		<wp:comment_date_gmt>2010-02-01 08:40:58</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[FWIW the Grok talks were

1.&gt; T4 - @RobBlackmore
2.&gt; CodeRush Xpress - @RoryBecker (Me)
3.&gt; Personal Kanban - @shiftin (ChrisBrown)
4.&gt; Albacore - @ben_hall]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>467</wp:comment_id>
		<wp:comment_author><![CDATA[cheat your way thin]]></wp:comment_author>
		<wp:comment_author_email>Staats@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://cheatyourwaythinweb.info/</wp:comment_author_url>
		<wp:comment_author_IP>80.82.150.158</wp:comment_author_IP>
		<wp:comment_date>2011-02-03 09:18:04</wp:comment_date>
		<wp:comment_date_gmt>2011-02-03 09:18:04</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I don't  unremarkably  comment but I gotta  state   regards  for the post on this one  : D.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>470</wp:comment_id>
		<wp:comment_author><![CDATA[cpa instruments]]></wp:comment_author>
		<wp:comment_author_email>Nuzback@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.cpainstrumentsweb.info/</wp:comment_author_url>
		<wp:comment_author_IP>194.44.219.103</wp:comment_author_IP>
		<wp:comment_date>2011-02-04 10:21:26</wp:comment_date>
		<wp:comment_date_gmt>2011-02-04 10:21:26</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I agree with your  details ,  excellent  post.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>472</wp:comment_id>
		<wp:comment_author><![CDATA[cpa instruments]]></wp:comment_author>
		<wp:comment_author_email>Tomko@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.cpainstrumentsweb.info/</wp:comment_author_url>
		<wp:comment_author_IP>79.133.86.111</wp:comment_author_IP>
		<wp:comment_date>2011-02-05 14:08:09</wp:comment_date>
		<wp:comment_date_gmt>2011-02-05 14:08:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I really    treasure your work , Great post.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>WCF Clients Part 1: Add Service Reference</title>
		<link>http://blog.ninjaferret.co.uk/?p=98</link>
		<pubDate>Tue, 31 Aug 2010 13:55:51 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[WCF]]></category>

		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=98</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>The problem I am trying to solve...</h2>
Over the past couple of years I have written a number of WCF services, I have hosted them in IIS, in a windows service and even in console applications (OK that was only for test/demo purposes) but every time I have written the service I have also written a client to work with that service; more often the need for the service has arisen as a part of writing some other application that I am trying to write.

Let us assume that I am writing an ASP.NET MVC web site that needs to talk down to a database to retrieve information and this site is a simple site that allows a bank clerk to do very simple banking transactions but the first thing we need to focus on is delivering a system that has very basic account management:
<ul>
	<li>Create an account</li>
	<li>Find an account using its ID</li>
	<li>Find an account using the name of the customer and the account type</li>
	<li>Transfer money between accounts</li>
	<li>Deposit money to an account</li>
	<li>Withdraw money from an account</li>
</ul>
[sourcecode language="csharp" gutter="false"]
public interface AccountService
{
    Account Get(int id);

    Account Find(string customerName, AccountType accountType);

    void Create(string customerName, AccountType accountType);
}
[/sourcecode]

I would create the site but have the controller talk down to an internal service which would abstract away all of the business logic from the user interface, this service would be injected into the controllers to aid testability. Within the service I would expect a rich domain model and repositories as the data access layer. I hook everything up and it works; so far, so good.

However, as well as the ASP.NET site the client would like a group of super users to have a specific WPF application that has the same functionality but also has the ability to do:
<ul>
	<li>Delete a transaction</li>
	<li>Update account details</li>
	<li>Freeze an account</li>
</ul>
I now need to expose the original service that I created to two different clients and at this point I turn to WCF so I start by amending the interface definition:

[sourcecode language="csharp" gutter="false"]
[ServiceContract]
public interface AccountService
{
    [OperationContract]
    [FaultContract(typeof(AccountNotFoundFault))]
    Account Get(int id);

    [OperationContract]
    [FaultContract(typeof(NoMatchingAccountsFault))]
    Account Find(string customerName, AccountType accountType);

    [OperationContract]
    [FaultContract(typeof(InvalidCustomerNameFault))]
    void Create(string customerName, AccountType accountType);
}
[/sourcecode]


The next thing I need to do is to host this new service somewhere, assuming for now this is IIS I could just plug in the existing service implementation but I would need to change within the service itself what exceptions it is throwing. Personally, I would much prefer to keep the service implementation "as is" and write a wrapper for it that catches the specific exceptions and throws their equivalent faults. 

OK, I've written the wrapper service, hosted it and I'm ready to go... well apart from the fact that I haven't yet done anything to the ASP.NET MVC or WPF clients. 

<h2>Add Service Reference</h2>

On my client projects, which normally exist within the same solution as the service (as the service was formed from it) I now need to use the "Add Service Reference" wizard. I locate my service and add the reference, luckily, if I have my service contract (i.e. the interface, faults and models) located in their own assembly I am happy to use the option to re-use the models that I am referencing, however it generates a new interface for me. 

<h3>I lose my reference to the original interface...</h3>

I am forced to change everywhere that referenced my original service interface to point to the client interface that has been generated despite the fact that the original interface is still perfectly usable. For me this is a problem, especially for my development, if I want to check some functionality out in a hurry I want the ability to just run the system and not care whether I have configured the WCF endpoint correctly on the server or the client; I just want to run the the service in-line to test the logic. Whether we use a WCF service or an in-line service on the production environment does not matter to me when I am tracking down a bug within the business logic.

You can edit the automatically generated reference to point back at your original interface (solve's this problem doesn't it) but that is extremely hacky and requires someone to know that every time you re-generate the reference you have to do this work and that is storing up problems for whoever is following you to maintain this code.

<h3>I now have to change all of my exception handling...</h3>

There is now also the problem with the exceptions that the service was originally throwing because all of my catch blocks need to be changed to catch the fault exceptions. They are no longer catching the original exceptions which means that it becomes even more difficult just to replace the WCF service at runtime with an in-line version. There is now a dependency, the client knows that it is talking via WCF and should the client actually care? Should any logic within the client care about how it is communicating with the service?

Again, the work-around is to catch both the original exceptions and the fault exceptions but that is really starting to make your code ugly and any logic is now still very dependent on knowing that we are talking over WCF.

<h3>The client is now disposable...</h3>

When we talk over WCF a channel is opened to the service by the automatically generated client and this resource needs to be released which is why the generated clients are disposable. All calls now need to be wrapped within a using statement so that we can correctly dispose of the resource. 

But what happens if there is an error? Well, on error dispose is not the method that you should call and a lot of people do not notice this. When an exception is thrown by the service then it is the client's job to call <strong>Abort()</strong> on the service to correctly dispose of any resource.

All of this is causing the client code to change significantly for no actual benefit, in my opinion all of this should be handled internally within the generated classes. 

<h2>So what next?</h2>

I have now finished ranting about the problems of using "Add service reference" and there are people out there who will tell me that using <strong>ChannelFactory&lt;T&gt;</strong> would solve some of my issues above and to those people I would say that you are partially correct but <strong>ChannelFactory&lt;T&gt;</strong> is the subject of my next post. 

Once I have finished explaining the problems of <strong>ChannelFactory&lt;T&gt;</strong> I will follow that with a post showing my solution to this problem as I release an open source WCF client generator to handle the issues above, so stay tuned...
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2010-08-31 13:55:51</wp:post_date>
		<wp:post_date_gmt>2010-08-31 13:55:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>my-issues-with-building-a-wcf-client-1-add-service-reference</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1283373505]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>466</wp:comment_id>
		<wp:comment_author><![CDATA[cdgvhts]]></wp:comment_author>
		<wp:comment_author_email>kdfcty@xwdwvc.com</wp:comment_author_email>
		<wp:comment_author_url>http://vyfqggffglsi.com/</wp:comment_author_url>
		<wp:comment_author_IP>79.142.66.56</wp:comment_author_IP>
		<wp:comment_date>2011-02-02 13:53:00</wp:comment_date>
		<wp:comment_date_gmt>2011-02-02 13:53:00</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[2JRHEk  <a href="http://qmvxiwrjgmoi.com/" rel="nofollow">qmvxiwrjgmoi</a>, [url=http://gwxxqredggqi.com/]gwxxqredggqi[/url], [link=http://hsesgsmyuqnp.com/]hsesgsmyuqnp[/link], http://onyisvuieyja.com/]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>469</wp:comment_id>
		<wp:comment_author><![CDATA[Grab your free forex trading signals]]></wp:comment_author>
		<wp:comment_author_email>denemour@mail333.com</wp:comment_author_email>
		<wp:comment_author_url>http://forex-promo.com</wp:comment_author_url>
		<wp:comment_author_IP>46.73.67.66</wp:comment_author_IP>
		<wp:comment_date>2011-02-04 08:48:08</wp:comment_date>
		<wp:comment_date_gmt>2011-02-04 08:48:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[This is my first time i visit here. I found so many interesting stuff in your blog especially its discussion. From the tons of comments on your articles, I guess I am not the only one having all the enjoyment here! keep up the good work..]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>WCF Clients Part 2: IChannelFactory&lt;T&gt;</title>
		<link>http://blog.ninjaferret.co.uk/?p=109</link>
		<pubDate>Sat, 04 Sep 2010 13:00:56 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[WCF]]></category>

		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=109</guid>
		<description></description>
		<content:encoded><![CDATA[I talked <a href="http://ninjaferret.co.uk/blog/?p=98">last time</a> about how I approached building a WCF service and how using "Add Service Reference" was causing me some problems. The next part of my journey into WCF was to look at other ways of managing the client and I came across <strong>IChannelFactory&lt;T&gt;</strong>.

<h2>Creating a proxy client IChannelFactory&lt;T&gt;...</h2>

So, to recap, last time I started by defining the following service:

[sourcecode language="csharp" gutter="false"]
[ServiceContract]
public interface AccountService
{
    [OperationContract]
    [FaultContract(typeof(AccountNotFoundFault))]
    Account Get(int id);

    [OperationContract]
    [FaultContract(typeof(NoMatchingAccountsFault))]
    Account Find(string customerName, AccountType accountType);

    [OperationContract]
    [FaultContract(typeof(InvalidCustomerNameFault))]
    void Create(string customerName, AccountType accountType);
}
[/sourcecode]

The next thing is to look at the original client code within an ASP.NET MVC controller:

[sourcecode language="csharp" gutter="false"]
public ActionResult AddNewAccount(NewAccountCommand newAccountCommand)
{
    // Validate the command
    ...
    // Create the account using the service
    try
    {
        _service.Create(newAccountCommand.CustomerName, newAccountCommand.AccountType);
     }
    catch (InvalidCustomerNameException e)
    {
        // Handle the error
    }
}
[/sourcecode]

How do we get to using the channel factory? As my client is already referencing the service assemblies and using the channel factory we can implement the interface:

[sourcecode language="csharp" gutter="false"]
var channelFactory = new ChannelFactory&lt;AccountService&gt;();
var proxy = channelFactory.CreateChannel();
[/sourcecode]

The proxy that is generated can be passed into the ASP.NET MVC controller as the service.

<h2>So where is the problem?</h2>

The client code above will work... well, it will work in the case where the exceptions are not thrown. When an exception is thrown it will be translated into a <strong>FaultException</strong> therefore the original exception will not be caught. To fix this we could try:

[sourcecode language="csharp" gutter="false"]
public ActionResult AddNewAccount(NewAccountCommand newAccountCommand)
{
    // Validate the command
    ...
    // Create the account using the service
    try
    {
        _service.Create(newAccountCommand.CustomerName, newAccountCommand.AccountType);
     }
    catch (InvalidCustomerNameException e)
    {
        // Handle the error
    }
    catch(FaultException&lt;InvalidCustomerNameFault&gt; fault)
    {
        // Handle the error
    }
}
[/sourcecode]

But now the code is less clean, for each error I want to handle I would have to now catch either just the equivalent <strong>FaultException</strong> or both the normal exception or the <strong>FaultException</strong>.

However, the service is now disposable! I now have to remember to call the <strong>Close()</strong> or <strong>Dispose()</strong> methods at some point to release the resources. When do I call it? I have injected this into the controller so the controller cannot dispose it because it does not know whether there are any other references to this object out there. 

While searching around this problem I came across the <a href="http://old.iserviceoriented.com/blog/post/Indisposable+-+WCF+Gotcha+1.aspx">Indisposable - WCF Gotcha 1</a> article on <a href="http://www.iserviceoriented.com/blog">serviceoriented.com</a>. To summarise, a disposable object can be wrapped in a using statement which will automatically call the <strong>Dispose()</strong> method or you can call the <strong>Dispose()</strong> method yourself (usually in a finally block). However, the proxy that is generated by <strong>ChannelFactory</strong> requires that you call <strong>Abort()</strong> after an exception rather than <strong>Dispose()</strong>.

The pattern that was recommended by the blog article was that we can wrap most of the error handling within a generic method:

[sourcecode language="csharp" gutter="false"]
public static class Service&lt;T&gt;
{
    public static ChannelFactory&lt;T&gt; _channelFactory = new ChannelFactory&lt;T&gt;(&quot;&quot;); 

    public static void Use(UseServiceDelegate&lt;T&gt; codeBlock)
    {
        IClientChannel proxy = (IClientChannel)_channelFactory.CreateChannel();
        bool success = false;
        try
        {
            codeBlock((T)proxy);
            proxy.Close();
            success = true;
        }
        finally
        {
            if (!success)
            {
                proxy.Abort();
            }
        }
    }
}
[/sourcecode]

But that means that rather than making a standard call to the service we now have to change the client code to:

[sourcecode language="csharp" gutter="false"]
public ActionResult AddNewAccount(NewAccountCommand newAccountCommand)
{
    // Validate the command
    ...
    // Create the account using the service
    try
    {
        Service&lt;AccountService&gt;.Use(service =&gt; service.Create(newAccountCommand.CustomerName, newAccountCommand.AccountType);
     }
    catch (InvalidCustomerNameException e)
    {
        // Handle the error
    }
    catch(FaultException&lt;InvalidCustomerNameFault&gt; fault)
    {
        // Handle the error
    }
}
[/sourcecode]

This makes me a little worried because the changes have just made the system untestable, by calling into this static class I have now bound the controller to requiring a WCF service to test.

<h2>Crafting my own proxy...</h2>

In order to keep my code testable I used the above pattern within my own hand-crafted proxies:

[sourcecode language="csharp" gutter="false"]
public class AccountServiceProxy : IAccountService
{
    public void Create(string customerName, AccountType accountType)
    {
        try
        {
            Service&lt;AccountService&gt;.Use(service =&gt; service.Create(customerName, accountType);
        }
        catch(FaultException&lt;InvalidCustomerNameFault&gt; fault)
        {
            throw new InvalidCustomerNameException(...);
        }
    }

    public Account Get(int id)
    {
        try
        {
            Account account = null;
            Service&lt;AccountService&gt;.Use(service =&gt; account = service.Get(id);
            return account;
        }
        catch(FaultException&lt;AccountNotFoundFault&gt; fault)
        {
            throw new AccountNotFoundException(...);
        }
    } 
}
[/sourcecode]

This keeps the client code in tact, it only needs to handle the standard exceptions that it always handled rather than adding anything more because of the faults. A much cleaner solution, in my mind.

<h2>So is there still a problem?</h2>

I think that there is still a problem, I am now having to manually do all of the work that I was hoping that someone else would do for me and this led me to think that I now had a pattern that I was manually applying to all services therefore it should be possible to automate the generation of these proxies; this leads me on nicely to my next post...
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2010-09-04 13:00:56</wp:post_date>
		<wp:post_date_gmt>2010-09-04 13:00:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-clients-part-2-ichannelfactoryt</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1283373501]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>5</wp:comment_id>
		<wp:comment_author><![CDATA[WCF Clients Part 3: Runtime Generated Proxies | The Ninja Ferret]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://blog.ninjaferret.co.uk/?p=86</wp:comment_author_url>
		<wp:comment_author_IP>88.208.252.132</wp:comment_author_IP>
		<wp:comment_date>2010-09-07 21:30:58</wp:comment_date>
		<wp:comment_date_gmt>2010-09-07 21:30:58</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Part 1 and Part 2 of my WCF Client series I have described the problems that I have encountered while building [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>483</wp:comment_id>
		<wp:comment_author><![CDATA[IvanaFukalot]]></wp:comment_author>
		<wp:comment_author_email>eretwe@mail.ru</wp:comment_author_email>
		<wp:comment_author_url>http://fukalot.ru/</wp:comment_author_url>
		<wp:comment_author_IP>95.78.108.109</wp:comment_author_IP>
		<wp:comment_date>2011-02-13 06:10:54</wp:comment_date>
		<wp:comment_date_gmt>2011-02-13 06:10:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Как вставить рисунок в комментарий ?]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>WCF Clients Part 3: Runtime Generated Proxies</title>
		<link>http://blog.ninjaferret.co.uk/?p=86</link>
		<pubDate>Tue, 07 Sep 2010 21:30:53 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[WCF]]></category>

		<category domain="category" nicename="wcf"><![CDATA[WCF]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[In <a href="http://ninjaferret.co.uk/blog/?p=98">Part 1</a> and <a href="http://blog.ninjaferret.co.uk/?p=109">Part 2</a> of my WCF Client series I have described the problems that I have encountered while building clients for WCF services and how I went about solving those problems by hand-crafting my own code. Having identified a standard pattern that I was using for creating a proxy client for a WCF service as seen in <a href="http://blog.ninjaferret.co.uk/?p=109">Part 2</a>.

My earlier posts were focussed around understanding IL and how to use IL to generate classes at runtime to implement an interface with the aim of generating proxy clients to implement the service interfaces. 

I have created a framework that will automatically generate a proxy client for the service interface at runtime. The <a href="http://github.com/downloads/ninjaferret/NinjaFerret.Wcf/NinjaFerret.Wcf.Client.zip">assemblies can be downloaded here</a> and the source code can be found <a href="http://github.com/ninjaferret/NinjaFerret.Wcf">on the github repository</a>  and I am going to talk about this new framework in this post.

<h2>Recap of the scenario I have</h2>

I have an account service that has been defined previously but now has been changed into a WCF service definition:

[sourcecode language="csharp" gutter="false"]
[ServiceContract]
public interface AccountService
{
    [OperationContract]
    [FaultContract(typeof(AccountNotFoundFault))]
    Account Get(int id);

    [OperationContract]
    [FaultContract(typeof(NoMatchingAccountsFault))]
    Account Find(string customerName, AccountType accountType);

    [OperationContract]
    [FaultContract(typeof(InvalidCustomerNameFault))]
    void Create(string customerName, AccountType accountType);

    [OperationContract]
    [FaultContract(typeof(AccountNotFoundFault))]
    void Delete(int accountId);

    [OperationContract]
    [FaultContract(typeof(AccountNotFoundFault))]
    [FaultContract(typeof(InvalidCustomerNameFault))]
    void ChangeAccountDetails(int accountId, string customerName, AccountType accountType);

    [OperationContract]
    [FaultContract(typeof(AccountNotFoundFault))]
    void FreezeAccount(int accountId);
}
[/sourcecode]

The client would like to have two different interfaces, the first of which is a general bank teller site written in ASP.NET MVC and a second administrator's application written in WPF that would be installed on the administrator's PC (at the moment as a means to justify having the service).

Having now defined the service interface as well as the models and even the faults/exceptions within a single assembly that will be referenced by both clients and by the service itself. The original service implementation will stay exactly the same and a new service implementation will be created to wrap the original service but handle the conversion between the original exceptions and the Faults that are to be carried over the wire.

<h2>Translating the exceptions within the service</h2>

If you take the original service:

[sourcecode language="csharp" gutter="false"]
public class InternalAccountService : AccountService
{
    //constructors and member variables here...

    public Account Get(int id)
    {
        var account = _accountRepository.Get(id);
        if (account == null)
            throw new AccountNotFoundException(id);
        return account;
    }

    // All the other methods go here
}
[/sourcecode] 

Create the <strong>AccountNotFoundFault</strong> fault making it implement <strong>NinjaFerret.Wcf.Exception.TranslatableFault</strong> then change the <strong>AccountNotFoundException</strong> to implement <strong>NinjaFerret.Wcf.Exception.ITranslatableException</strong>:

[sourcecode language="csharp" gutter="false"]
[DataContract]
public class AccountNotFoundFault : TranslatableFault
{
    [DataMember]
    public int AccountId { get; set; }

    public override Exception ToException()
    {
        return new AccountNotFoundException(AccountId);
    }
}

public class AccountNotFoundException : Exception, NinjaFerret.Wcf.Exception.ITranslatableException
{
    public int AccountId { get; private set; }

    public AccountNotFoundException(int accountId) 
       : base(string.Format(&quot;Account {0} could not be found&quot;, accountId)
    {
        AccountId = accountId;
    }

    public Fault ToFaultException()
    {
        return new FaultException&lt;AccountNotFoundFault &gt;(
                    new AccountNotFoundFault {AccountNumber = AccountNumber},
                    &quot;The account does not exist&quot;);
    }
}
[/sourcecode]

Your service wrapper becomes:

[sourcecode language="csharp" gutter="false"]
public class ExposedAccountService : AccountService
{
    // Constructors and member variables

    public Account Get(int id)
    {
        try
        {
            return _internalAccountService.Get(id);
        }
        catch(AccountNotFoundException e)
        {
            throw e.ToFaultException();
        }
    }

    // And other method implementations here
}
[/sourcecode]

I can then host this service wrapper within IIS, within a windows service or anywhere a WCF service can be hosted.

<h2>What happens to the client?</h2>

I now have a service that I can communicate with but what do I have to do on the client? Well, that is where the <strong>NinjaFerret.Wcf.Client.ClientFactory</strong> class comes into play. 

I am assuming that the client has been written against original interface and the current implementation (the <em>InternalAccountService</em>) was injected in to the constructor (my sample application does this using the <a href="http://www.castleproject.org/container/index.html">Castle Windsor</a> dependency injection framework). Whatever injects the service implementation into the client now needs to call:

[sourcecode language="csharp" gutter="false"]
// this will require that a standard endpoint is set up with the name
// AccountService
new ClientFactory&lt;AccountService&gt;().Generate(); 
[/sourcecode]

Or if you need to call into services that provide the same interface but with different endpoints then each endpoint will need its own name:

[sourcecode language="csharp" gutter="false"]
// this will require that a standard endpoint is set up with the specified endpoint name
new ClientFactory&lt;AccountService&gt;().GenerateForEndpoint(string endpointName); 
[/sourcecode]

The <strong>ClientFactory</strong> will, at runtime, generate a client for you based on the information provided by the original interface and will use the <strong>NinjaFerret.Wcf.Exception</strong> faults provided to convert back and throw the original exceptions therefore there is no additional exception handling to be done on the client (if there is a communication exception then the client may need to handle this case but it is a significantly smaller change that would not affect behaviour should we revert to running the service in-line). The generated client handles all exceptions that come across the wire and correctly disposes any failed channels so we do not have to change the clients to dispose of the service. 

What remains is the standard config changes for defining a WCF  endpoint:

[sourcecode language="xml" gutter="false"]
&lt;system.serviceModel&gt;
    &lt;client&gt;
      &lt;endpoint address=&quot;http://localhost:8010/AccountService&quot; binding=&quot;basicHttpBinding&quot;
        bindingConfiguration=&quot;&quot; contract=&quot;NinjaFerret.Wcf.Sample.BankManager.Interface.AccountService&quot;
        name=&quot;AccountService&quot; kind=&quot;&quot; endpointConfiguration=&quot;&quot;&gt;
      &lt;/endpoint&gt;
    &lt;/client&gt;
  &lt;/system.serviceModel&gt;
[/sourcecode]

<h2>So what now?</h2>

That is up to you... 

1. Download it
2. Try it
3. Give feedback - without feedback (good or bad) I can't improve it]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2010-09-07 21:30:53</wp:post_date>
		<wp:post_date_gmt>2010-09-07 21:30:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wcf-clients-part-3-runtime-generated-proxies</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1296512425]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>My team&#039;s Kanban board</title>
		<link>http://blog.ninjaferret.co.uk/?attachment_id=147</link>
		<pubDate>Thu, 07 Oct 2010 20:44:11 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<guid isPermaLink="false">http://ninjaferret.co.uk/blog/wp-content/uploads/2010/10/KanbanAtWork_small.png</guid>
		<description></description>
		<content:encoded><![CDATA[This is the Kanban board that has evolved for my team. ]]></content:encoded>
		<excerpt:encoded><![CDATA[My team's Kanban board]]></excerpt:encoded>
		<wp:post_id>147</wp:post_id>
		<wp:post_date>2010-10-07 20:44:11</wp:post_date>
		<wp:post_date_gmt>2010-10-07 20:44:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>kanbanatwork_small</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>72</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ninjaferret.co.uk/blog/wp-content/uploads/2010/10/KanbanAtWork_small.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/10/KanbanAtWork_small.png]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"815";s:6:"height";s:3:"645";s:14:"hwstring_small";s:23:"height='96' width='121'";s:4:"file";s:30:"2010/10/KanbanAtWork_small.png";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:30:"KanbanAtWork_small-150x150.png";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:30:"KanbanAtWork_small-300x237.png";s:5:"width";s:3:"300";s:6:"height";s:3:"237";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_image_alt</wp:meta_key>
		<wp:meta_value><![CDATA[This is my team's Kanban board]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>An introduction to Kanban</title>
		<link>http://blog.ninjaferret.co.uk/?p=72</link>
		<pubDate>Thu, 07 Oct 2010 22:33:33 +0000</pubDate>
		<dc:creator><![CDATA[Ian Johnson]]></dc:creator>
		
		<category><![CDATA[Development Methodologies]]></category>

		<category domain="category" nicename="development-methodologies"><![CDATA[Development Methodologies]]></category>

		<category><![CDATA[Kanban]]></category>

		<category domain="category" nicename="kanban"><![CDATA[Kanban]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[I recently gave a nugget at <a href="http://nxtgenug.net/">nxtgen user group</a> in Cambridge on Kanban and thought that I would just get my <a href="http://ninjaferret.co.uk/Presentations/Kanban.pptx">slides on-line</a> for people to download.

For several years I have been working within an agile team, or a team trying to be agile in a hostile world. We were trying to use SCRUM and achieved a lot but there were times when we actually found that it became difficult because we were not quite managing to do agile methods to their completion as we found it difficult to break away from the traditional waterfall methodologies. Testers were not close to the development so months of development work was being done before testers would even look at it and on the other side of development we were expected to do a significant amount of  analysis and design months in advance of any software being developed.

My team was faced with the question <em>how much time are we going to commit to fixing bugs this iteration?</em> How can we answer that? Perhaps if we knew what bugs there were going to be found then we would know how we were going to fix them but this is the real world and we guessed. Were the guesses accurate? We found that either we were significantly under or over-committing to the sprint depending on the bugs that were found in the last project. At this point the sprints started to fail and the team became demotivated.

Kanban came to the rescue. 

<h2>What is Kanban?</h2>

Kanban originated in the 1940's and 50's from Toyota where they were developing the <em>lean</em> processes. They devised a process where each process in the chain was the consumer of the earlier processes, in the system there should be enough parts in the stores to allow the current process to take only what it needs and then a <em>signal</em> (usually in the form of a card - or <strong>Kanban</strong> as they are called in Japanese) is sent to the previous process to produce more of the consumed items.

The delivery of the final product to the consumer determines the rate of flow, if demand is low then production slows down (by removing Kanban from the system) and if demand increases more Kanban are pushed into the system to meet demand.  

<h2>Applying Kanban...</h2>
Kanban does not always have to be applied to the manufacturing industry where it was first conceived, it can be used as a means of managing workflow in a number of different environments and be applied to many processes.

<h3>Value stream</h3>

The first thing that you really need to do is to start looking at the <em>Value Stream</em> that you are applying Kanban to, personally I would start with the most basic flow:

<ol>
  <li><strong>To Do</strong> this is the list of tasks (hopefully prioritised) that needs to be done, sometimes I will call this <em>Options</em>.</li>
  <li><strong>Doing</strong> the list of tasks that is currently being worked on, the things that are in progress.</li>
  <li><strong>Done</strong> the task has been completed - it is up to the individual team to determine what they define by done</li>
</ol>

In a complicated process then it is necessary to actually break down the "Doing" column down into smaller sections that map the process that a task has to go through in order to be completed. Given the software development domain then we may have:

<ul>
  <li>Analysis</li>
  <li>Development</li>
  <li>Test</li>
 </ul>

We may say that something is only truly done when it is deployed to the production environment.

<h3>Introduce a pull-based signalling mechanism...</h3>

So, having mapped our value stream we need to think about a system where the new features are pulled through the system rather than being pushed through. Continuing with the development environment and assuming that we are aiming to deliver features into a system:

<ul>
  <li>The <strong>Testers</strong> finishes testing a feature, releases it for production deployment. They know that a feature is waiting for them and so they begin testing that feature. This is the signal to the development team that the test team need will soon need a new feature to test.</li>
  <li>The <strong>Developers</strong> were already working on a new feature and deliver it to the test team, they complete the work and it is ready to test. They have received a signal from the Test Team that they can start work on a new feature so they take the feature that is pending; this is the signal to the analysts that a new feature is required.</li>
  <li>The <strong>Analysts</strong> were already preparing the initial analysis for a new feature and make it available when it is ready. They receive a signal from the development team saying that they have no pending work therefore they take the next high priority story and begin their analysis.</li>
</ul>

Therefore the flow has changed from people saying "you will deliver this" to simply focussing on delivering at the speed of the slowest component.

<h3>Visualisation</h3>

When applying Kanban to software processes people tend to create a <strong>Kanban board</strong>. At the moment I am using a whiteboard:

[caption id="attachment_147" align="alignnone" width="300" caption="My team\'s Kanban board"]<a href="http://ninjaferret.co.uk/blog/wp-content/uploads/2010/10/KanbanAtWork_small.png"><img src="http://ninjaferret.co.uk/blog/wp-content/uploads/2010/10/KanbanAtWork_small-300x237.png" alt="This is my team&#039;s Kanban board" title="My team&#039;s Kanban board" width="300" height="237" class="size-medium wp-image-147" /></a>[/caption]

It is broken down into the three basic components:

<ul>
   <li>Options - a prioritised list of items that need to be done (<em>To Do</em> from above)</li>
   <li>In Progress - what the team is working on (<em>Doing</em> from above)</li>
   <li>Deployed - the work is finally deployed to the production server (<em>Done</em> from above)</li>
</ul>

I would generally advise that you keep the board simple and focus on mapping your value stream. We split the <em>In Progress</em> column into the three phases of <strong>Analysis</strong>, <strong>Build</strong> and <strong>Test</strong>. In the lower horizontal swim-lane we have provided a number of different sections that representing the flow of data:

<ul>
  <li><strong>Parked</strong> - After initial analysis the project is put on hold until approval is reached and once more after the design has been produced. As you can see, we have done a lot analysis and design at the moment.</li>
  <li><strong>Awaiting Test</strong> - Our Test Team are in control about when they receive the new features. We have split this section into two pieces, the first for items in the release currently being tested and the other for items being built for the next release.</li>
  <li><strong>Awaiting deployment</strong> - If/When the test team tell us that a feature has been tested (including UAT) then it is now just waiting for a deployment to be scheduled.</li>
  <li><strong>Rejected</strong> - This is for features that have either been pulled, due to the estimates being large, or for bugs reported where the problem was with the original setup data.</li>
</ul> 

This board represents our view of the world, it was not our first attempt and I'm sure that over time it will evolve further.

We have also been experimenting with recording the dates on which the features move from one state to the next, as we record these facts we can build metrics of how long different sized features take to pass through each stage in the system.

<h3>Limiting Work in Progress</h3>

We use our Kanban board to help us limit the amount of work in progress that our team is doing. With a team of 5 people we limit ourselves to no more than 8 features in progress at once, 4 things in analysis and design with a further 4 things in build. At the moment we do not constrain the work of the Test Team because we deliver work to them in a waterfall manner.

Why do we limit the work in progress? If we do not limit our work in progress then a team can quickly become swamped with requests for designs to be done, bugs raised by the test team, new features and numerous other things. Context switching is expensive and it is often easier to focus on a single thing to completion before starting the next. 

Limiting the total work in progress for the team to less than double the team's number ensures that no one person can be working on more than two things at once, if one task is blocked then they can work on the other. However, it encourages people to help the other members of the team, if I complete something in <em>build</em> but nothing is ready for analysis I should help someone finish their analysis, or do some work to aid the test team.


<h3>Identifying inefficient processes</h3>

So far I have talked about mapping your value streams, visualising your progress with a Kanban board and limiting your work in progress. The Kanban board is flowing and it becomes quickly obvious where the most inefficient processes are:

<ul>
  <li>Testing is swamped - there are over 40 items stacked within the test column</li>
  <li>We are doing a significant amount of analysis so far ahead of development that we have to re-analyse everything before starting work</li>
</ul>

These are things that we already "know" but it helps us to quantify and visualise the nature of the problem. We know now that there are features waiting for almost 5 months from when we finished the development and have not yet gone into testing. We know that testing is swamped and we can see just how much work they have to do. Will this help us make changes? I hope so.

<h3>Experiment</h3>

The Kanban board has to be built for your specific team, they have to mean something to your team because unless you get buy-in from everyone then it is not going to work. Apply the <em>Inspect and Adapt</em> principle, try something for a while, review it and then decide whether it was a success or not.

<h2>Summary</h2>

Kanban is a simple system, it is a signalling system that works with your current processes, gives you the ability to constrain your work to make you more efficient and allows you to visualise the inefficiencies in your system. Please try out Kanban and experiment with it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2010-10-07 22:33:33</wp:post_date>
		<wp:post_date_gmt>2010-10-07 22:33:33</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>an-introduction-to-kanban</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1286745104]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>11</wp:comment_id>
		<wp:comment_author><![CDATA[smartQ]]></wp:comment_author>
		<wp:comment_author_email>support@getsmartQ.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.getsmartQ.com</wp:comment_author_url>
		<wp:comment_author_IP>24.166.244.3</wp:comment_author_IP>
		<wp:comment_date>2010-10-08 17:31:55</wp:comment_date>
		<wp:comment_date_gmt>2010-10-08 17:31:55</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Hopefully Kanban will start to be used more widely, not only in SW.

We are launching an online Kanban board soon: <a href="http://www.getsmartQ.com" rel="nofollow">www.getsmartQ.com</a>.

First Kanban board for masses :-)]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>12</wp:comment_id>
		<wp:comment_author><![CDATA[ninjaferret]]></wp:comment_author>
		<wp:comment_author_email>ij203@hotmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://ninjaferret.co.uk</wp:comment_author_url>
		<wp:comment_author_IP>86.14.226.97</wp:comment_author_IP>
		<wp:comment_date>2010-10-08 22:07:35</wp:comment_date>
		<wp:comment_date_gmt>2010-10-08 22:07:35</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I think that there is a use for on-line tools when it comes to distributed teams and collaboration but at the moment I think that for a single team that is co-located the immediacy of the visualisation of having it up on the wall still beats an on-line solution.]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>11</wp:comment_parent>
		<wp:comment_user_id>2</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>465</wp:comment_id>
		<wp:comment_author><![CDATA[vimax]]></wp:comment_author>
		<wp:comment_author_email>mattcut90@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://vimax3-4.com</wp:comment_author_url>
		<wp:comment_author_IP>178.32.81.224</wp:comment_author_IP>
		<wp:comment_date>2011-02-02 04:51:09</wp:comment_date>
		<wp:comment_date_gmt>2011-02-02 04:51:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[RE: It's so hard to get backlinks these days, honestly i need a backlink by comments on your blog / forums or guestbook to make my website appear in search engine. I am getting desperate Now! I know you'll laugh while reading this comment !!! Here is my website <a href="http://vimax3-4.com" rel="nofollow">vimax</a> I know my comments do not relate to the topic, but PLEASE HELP ME!! APPROVING MY COMMENT!
Regards: PoormanBH2011
So what is the problem my friends, I'm collecting backlinks to make my website <a href="http://www.vimax-pills.org" rel="nofollow">Vimax</a> appear in the search engines!! whether are the comments look like a crap!
HahayBH2011]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>471</wp:comment_id>
		<wp:comment_author><![CDATA[vimax]]></wp:comment_author>
		<wp:comment_author_email>mattcut90@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://vimax3-4.com</wp:comment_author_url>
		<wp:comment_author_IP>178.32.81.224</wp:comment_author_IP>
		<wp:comment_date>2011-02-04 18:39:39</wp:comment_date>
		<wp:comment_date_gmt>2011-02-04 18:39:39</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[RE: It's so hard to get backlinks these days, honestly i need a backlink by comments on your blog / forums or guestbook to make my website appear in search engine. I am getting desperate Now! I know you'll laugh while reading this comment !!! Here is my website <a href="http://adspe.com" rel="nofollow">download youtube videos</a> I know my comments do not relate to the topic, but PLEASE HELP ME!! APPROVING MY COMMENT!
Regards: PoormanBH2011
So what is the problem my friends, I'm collecting backlinks to make my website <a href="http://www.buypenisenlargement.com" rel="nofollow">bigger penis</a> appear in the search engines!! whether are the comments look like a crap!
HahayBH2011]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>476</wp:comment_id>
		<wp:comment_author><![CDATA[penis enlargement]]></wp:comment_author>
		<wp:comment_author_email>mattcut90@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.buypenisenlargement.com</wp:comment_author_url>
		<wp:comment_author_IP>178.32.81.224</wp:comment_author_IP>
		<wp:comment_date>2011-02-07 06:27:29</wp:comment_date>
		<wp:comment_date_gmt>2011-02-07 06:27:29</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[RE: It's so hard to get backlinks these days, honestly i need a backlink by comments on your blog / forums or guestbook to make my website appear in search engine. I am getting desperate Now! I know you'll laugh while reading this comment !!! Here is my website <a href="http://www.male-sexual-styles.com" rel="nofollow">penis enlargement</a> I know my comments do not relate to the topic, but PLEASE HELP ME!! APPROVING MY COMMENT!
Regards: PoormanBH2011
So what is the problem my friends, I'm collecting backlinks to make my website <a href="http://www.buypenisenlargement.com" rel="nofollow">penis enlargement</a> appear in the search engines!! whether are the comments look like a crap!
HahayBH2011]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>474</wp:comment_id>
		<wp:comment_author><![CDATA[penis enlargement]]></wp:comment_author>
		<wp:comment_author_email>mattcut90@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.buypenisenlargement.com</wp:comment_author_url>
		<wp:comment_author_IP>178.32.81.224</wp:comment_author_IP>
		<wp:comment_date>2011-02-06 13:33:50</wp:comment_date>
		<wp:comment_date_gmt>2011-02-06 13:33:50</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[RE: It's so hard to get backlinks these days, honestly i need a backlink by comments on your blog / forums or guestbook to make my website appear in search engine. I am getting desperate Now! I know you'll laugh while reading this comment !!! Here is my website <a href="http://vimax3-4.com" rel="nofollow">vimax</a> I know my comments do not relate to the topic, but PLEASE HELP ME!! APPROVING MY COMMENT!
Regards: PoormanBH2011
So what is the problem my friends, I'm collecting backlinks to make my website <a href="http://penisenlargementkey.com" rel="nofollow">penis enlargement pills</a> appear in the search engines!! whether are the comments look like a crap!
HahayBH2011]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>UK Tech Days - Steve Ballmer, the Cloud and Phones</title>
		<link>http://blog.ninjaferret.co.uk/?p=156</link>
		<pubDate>Sat, 09 Oct 2010 14:30:50 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category><![CDATA[Conferences]]></category>

		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>

		<category><![CDATA[UK Tech Days]]></category>

		<category domain="category" nicename="uk-tech-days"><![CDATA[UK Tech Days]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=156</guid>
		<description></description>
		<content:encoded><![CDATA[I was one of those attending the Microsoft UK Tech Days on Tuesday, 5th October 2010. I thought that it would be a good idea to see Steve Ballmer talk about the recent developments within the Microsoft world and hear a bit about Cloud computing and Windows Phone 7.

As always it is fantastic to get to meet so many developers in the UK who are passionate about software development. I have written quite a bit so I thought I'd just provide a quick link to the different talks here:

<ul>
  <li><a href="#keynote">Keynote speech by Steve Ballmer</a></li>
  <li><a href="#phone7">Windows Phone 7</a></li>
  <li><a href="#azure">Windows Azure</a></li>
  <li><a href="#ie9">Internet Explorer 9</a></li>
  <li><a href="#windows7">Windows 7</a></li>
</ul>

<h2 id="keynote">Keynote - Steve Ballmer</h2>

Steve was an interesting person to listen to, he is working hard to convey passion about the future of Microsoft. He talked about the imminent release of <em>Windows Phone 7</em>, he admitted that other smart phone providers had stolen an march on Microsoft and that now Microsoft were trying to play catch-up in the field.

He enthused about IE9, the most standards compliant browser that Microsoft has ever produced and about how they are working with the standards bodies by contributing to the test frameworks.

Perhaps one of the more interesting areas that he was talking about was the Windows Azure platform, a cloud computing service that is Microsoft's attempt to get into the cloud computing market. It is interesting the cycles that we are seeing in the computer market, at one time there were just mainframe computers and everyone worked on a dumb terminal but eventually the personal computer came along and the day of the mainframe seemed to be coming close to an end. However, as technology grew and systems became more connected it once again drove us back to a fairly powerful server-side layer and rather dumber terminals. This time, however, there is a slight difference Steve believes that people want smarter clients to go along with their cloud services which is a concept that I had not really thought of before. Phones are becoming smarter, web-sites are not demanding that the browser provide the capacity to deliver a rich interface for their customers that goes beyond post backs and links. 

<h3>Microsoft vs Open Source</h3>
Steve took quite a few questions and there was one by <a href="http://serialseb.blogspot.com">Sebastian Lambla</a> concerning Microsoft's support for the open source community. There are a number of instances where the Microsoft giant has "re-invented the wheel" when there was a perfectly valid open source project already on the market and relatively few cases where they have thrown their might behind an open source project (<a href="http://jquery.com">JQuery</a> being the most well known example).  

There is a natural tension there, even though Microsoft have created <a href="http://codeplex.com">codeplex</a> for hosting open source projects and a number of their own projects are now hosted on there (they have made their code for <a href="http://aspnet.codeplex.com/">ASP.NET</a> available through the site) there is still a long way to go.

Steve did not immediately have an answer about Microsoft's strategy concerning the Open Source community though did say he'd take a note on it and would consult with senior management about their open source policy. 

To be fair for a long time there was very little Open Source activity in the .NET world and Microsoft were simply building features, products and libraries that they felt were needed in the community. Now, things are changing, the .NET world is opening itself up to new ideas and concepts and people are writing some excellent open source projects. In reality there are a lot of extremely intelligent developers out there writing new libraries, tools and frameworks on the .NET platform and Microsoft would do well to support that community, not only to leverage the innovative ideas, but to provide support to a growing community that if nurtured will remain on the .NET platform and not drift away disillusioned with Microsoft.

I sincerely hope that Steve goes away and thinks seriously about working with the .NET community.

<h2 id="phone7">Windows Phone 7</h2>

So we now come on to the details of the tech days - once Steve had parted the stage and we'd had a little break it was time to take a look at Windows Phone 7. 

My initial thoughts on hearing about Windows Phone 7 was that Microsoft were coming to the party a little late and that there are a number of other more mature phone OS platforms (iPhone and Android really do spring to mind here). However, it was going to be interesting to see what Microsoft would bring to the party.

Microsoft at the moment are trying to tread a fine line between the Apple model <em>"our hardware, our software and everything is tightly controlled"</em> and the Google model <em>"any hardware, our software and it's up to you what you do"</em> by having very tight constraints on the minimum hardware capabilities for the phone manufacturers and they would provide the software to make full use of that hardware. I'm still unusure about what the implications of the different models are but I see that Apple is maintaining the business model that failed in the 80s and 90s when they bound their hardware and software together in an expensive bundle while Microsoft supported any hardware and therefore more people could afford them.

So, about the operating system itself. Microsoft have been borrowing some ideas from other operating systems with features like displaying social media content for your contacts and I've heard some interesting reviews (at least one person has said that they hated the fact that all of their facebook contacts appear in the contacts list when they are trying to find a phone - this wouldn't generally bother me as almost everyone I know on facebook I have a phone number for). The apparent lack of support for Twitter seems to me to be a bit of an oversight on Microsoft's part. In terms of other features they have Push notifications that mimics the Apple push notifications but allows people to change the "tile image" for the application that is receiving the message which is a neat little touch. 

Sadly Windows Phone 7 is lacking in multi-tasking abilities beyond their own applications. I understand that Microsoft are probably worried about the impact on the battery life of their phones, as Apple were, but even Apple have realised that having some multi-tasking capability is necessary and relented with iOS 4. Also there was a sad lack of any copy and paste which Microsoft said that this was not something that people want but trust me, the phone comes with a version of office and I want copy and paste when I'm working in office documents. 

Beyond that development for Windows Phone 7 is actually a very nice experience as the applications are either Silverlight based or XNA based so build on the standard set of tools that .NET developers are all going to be familiar with. Seeing how "easy" the development was then I am encouraged to play around with Windows Phone 7 development and see just what is out there.

Will Windows Phone 7 be a hit? I'm not sure, the timescales for development of the phone are very tight and I think that the other operating systems are more mature but Microsoft has an amazing chance to bring something new to the party with later versions of the operating system. They broke in to the lucrative gaming market with great success with the X-box, they have millions of desktop users and therefore they need to bring together a fusion environment where all the devices work together as a phenomenal user experience.

<h2 id="azure">Windows Azure</h2>

The next talk, after a break and a chat to some students who had won a competition to go to this event, was about Windows Azure, the cloud computing service provided by Microsoft. 

Why should we use cloud computing? Well, if you are simply producing a small website then I think that using a cheap hosting package (there are plenty out there for a few pounds a month) would actually be better for you but if you are creating an application that may need to scale up and down as demand waxes and wanes then this is certainly something that you should potentially consider. 

Couldn't I just get a server? Yes, initially you could just buy a server and then manage and maintain it yourself but that can cost your organisation. Similarly, for a larger organisation a data centre is an expensive thing to have. However, if you have significantly fluctuating demand (perhaps a live sports video feed site that only really is under demand when a sporting event is on) then the servers are sitting there doing nothing but consuming power and costing you money to maintain.

With Azure you can scale back during quiet period and then scale up significantly just before the event ensuring that you have capacity and then scale back when the event is over and you are only paying for those instances for the time that they are running without having to manage the infrastructure yourself. 

Azure works on the idea of a <strong>role</strong> which can be a web site, web service or a background worker process. Each of these are intuitively easy for existing developers to learn as they are building on the same kinds of concepts that are behind traditional web and service projects. Microsoft will then charge you per compute hour for each instance of each role. 

There are also a number of different storage mechanisms on Azure and it is worth people getting to understand what is available before just deciding to go down the SQL Azure route. 

<ul>
  <li><strong>Blob Storage</strong>
  This can store almost anything and is effectively a cloud file system. Fast and reliable</li>
  <li><strong>Queues</strong>
  Queues are mechanisms for securely communicating between services.
  <li><strong>Tables</strong>
  Tables are not SQL Server Tables! In effect they are an large single table that is indexed by "Table Name", "Partition Key" and "Row" then there are 252 other columns that cannot be indexed (so beware folks, always query your tables with these keys otherwise you'll be doing table scans). Different rows in the table can be different schemas. If you design your structures correctly this can be a very fast (and very cheap) way to store data.</li>
  <li><strong>SQL Azure</strong>
  This is almost, but not quite, SQL Server in the cloud. There are a number of limitations to this and the most basic package costs $6 per month for up to 1GB of data.</li>
</ul>

I am quite interested in development for Windows Azure and I have registered with an account though at the moment I am slightly worried about the costs $0.12 per hour (that is not per CPU hour but per hour that your application is deployed) which means that to run a single compute instance for an entire year is over $1,000 especially when you take into account storage etc. Just as a comparison the <a href="http://heroku.com">Heroku</a> platform for Ruby gives you one web instance free and charges you about half as much for subsequent instances.

<h2 id="ie9">IE9</h2>

Well, IE9 doesn't really excite me that much. It is the most standards compliant Microsoft browser, they have made it look cleaner and they have leveraged the power of the GPU to make it currently out-perform other browsers (though at some point the other browsers will catch up on that score.

Microsoft at the moment seem to be putting resource into HTML5 and trying to make the platform work and there are a number of little features that integrate your favourite web pages into windows 7 with features like Jumplists that will allow you to pin your site and specific links within your site to the taskbar (for example pin facebook to your taskbar and you'll have jumplists to go directly to your messages, events etc by just right-clicking on the taskbar icon).

There are some innovative ideas here but nothing that is truly inspiring me at the moment. 

<h2 id="windows7">Windows 7 - by Mike Taulty</h2>

Windows 7 is already here but I think the focus of this talk was primarily around re-thinking how we develop applications and how people expect applications to behave in the modern world. Old-style windows with grey background, text fields etc that are fairly static and boring are no longer really applicable in a world where the web is providing extremely rich and interesting interfaces. 

Using WPF can allow you to develop some interesting and dynamic interfaces (one example of this is the <a href="http://www.metrotwit.com">MetroTwit</a> twitter client that uses a Metro interface) and another example was the Zune interface that Microsoft have developed. People want their desktop apps to feel intuitive, to look sleek and stylish just as they would expect a web-site to look. 

Microsoft now expose ribbon interfaces to replace the old menu and toolbar interfaces and they have provided us with newer dialog boxes that look cleaner and well, generally just more shiny than the traditional boxes. 

Mike also showed us how to handle auto-recovery should your application crash to improve the user experience. 

It is our responsibility, as developers and designers, to provide the users with easy clean and intuitive interfaces and there is a lot of work going on at the moment to change the way in which Windows 7 applications will appear in the future and don't forget that as touch devices become more popular the nature of a lot of our applications may also have to change, even if Windows 7 is multi-touch compatible our applications have to be as well.

<h2>Summary</h2>

Sorry for typing so much, all in all the Microsoft Tech Days was a really interesting event and I have been thinking a lot about it over the last few days. I enjoy conferences in general as they are a way to recharge my batteries and learn something that is not part of my daily life, spending time with other passionate developers during (and in the pub after) the conferences. Thanks to the UK Tech Days team for organising this and I look forward to the other events in the future.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2010-10-09 14:30:50</wp:post_date>
		<wp:post_date_gmt>2010-10-09 14:30:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>uk-tech-days-steve-ballmer-the-cloud-and-phones</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1286747984]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>468</wp:comment_id>
		<wp:comment_author><![CDATA[cialis]]></wp:comment_author>
		<wp:comment_author_email>m.olchkoff@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://mycialisrx.com</wp:comment_author_url>
		<wp:comment_author_IP>91.212.226.133</wp:comment_author_IP>
		<wp:comment_date>2011-02-04 02:47:24</wp:comment_date>
		<wp:comment_date_gmt>2011-02-04 02:47:24</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Awsome blog! How can I add it to bookmarks?]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>CQRS-Old-Architecture.jpg</title>
		<link>http://blog.ninjaferret.co.uk/?attachment_id=193</link>
		<pubDate>Sun, 17 Oct 2010 18:39:25 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<guid isPermaLink="false">http://ninjaferret.co.uk/blog/wp-content/uploads/2010/10/CQRS-Old-Architecture.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>193</wp:post_id>
		<wp:post_date>2010-10-17 18:39:25</wp:post_date>
		<wp:post_date_gmt>2010-10-17 18:39:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cqrs-old-architecture-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>184</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ninjaferret.co.uk/blog/wp-content/uploads/2010/10/CQRS-Old-Architecture.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/10/CQRS-Old-Architecture.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"712";s:6:"height";s:3:"482";s:14:"hwstring_small";s:23:"height='86' width='128'";s:4:"file";s:33:"2010/10/CQRS-Old-Architecture.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:33:"CQRS-Old-Architecture-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:33:"CQRS-Old-Architecture-300x203.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"203";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>CQRS-Architecture.jpg</title>
		<link>http://blog.ninjaferret.co.uk/?attachment_id=196</link>
		<pubDate>Fri, 22 Oct 2010 14:11:54 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<guid isPermaLink="false">http://ninjaferret.co.uk/blog/wp-content/uploads/2010/10/CQRS-Architecture.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>196</wp:post_id>
		<wp:post_date>2010-10-22 14:11:54</wp:post_date>
		<wp:post_date_gmt>2010-10-22 14:11:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cqrs-architecture-jpg</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://ninjaferret.co.uk/blog/wp-content/uploads/2010/10/CQRS-Architecture.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attached_file</wp:meta_key>
		<wp:meta_value><![CDATA[2010/10/CQRS-Architecture.jpg]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"806";s:6:"height";s:3:"536";s:14:"hwstring_small";s:23:"height='85' width='128'";s:4:"file";s:29:"2010/10/CQRS-Architecture.jpg";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:4:"file";s:29:"CQRS-Architecture-150x150.jpg";s:5:"width";s:3:"150";s:6:"height";s:3:"150";}s:6:"medium";a:3:{s:4:"file";s:29:"CQRS-Architecture-300x199.jpg";s:5:"width";s:3:"300";s:6:"height";s:3:"199";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>CQRS: Keeping it simple</title>
		<link>http://blog.ninjaferret.co.uk/?p=184</link>
		<pubDate>Fri, 22 Oct 2010 14:14:54 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category domain="tag"><![CDATA[Architecture]]></category>

		<category domain="tag" nicename="architecture"><![CDATA[Architecture]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[CQRS]]></category>

		<category domain="category" nicename="cqrs"><![CDATA[CQRS]]></category>

		<category domain="tag"><![CDATA[CQRS]]></category>

		<category domain="tag" nicename="cqrs"><![CDATA[CQRS]]></category>

		<category><![CDATA[Software Architecture]]></category>

		<category domain="category" nicename="software-architecture"><![CDATA[Software Architecture]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=184</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Architecture Series Overview</h2>

I have recently become increasingly interested in how we, as developers and architects, structure the systems that we are creating. The demands on on-line systems are significantly different to the demands on desktop only software. Scalability, robustness, performance, resilience are all important factors when thinking about on-line services and there has been a lot of debate within the software world about how we should architect these systems. These posts are my views of interesting architectural patterns and practices that I have been looking at:

<ol>
  <li><strong>CQRS: Keeping it simple</strong> is right here</li>
  <li><a href="http://blog.ninjaferret.co.uk/?p=221">Domain Events</a></li>
</ol>

<h2>CQRS</h2>

Command Query Responsibility Segregation, or CQRS from now on, is an architectural pattern developed by Greg Young and Udi Dahan. My aim is to take you through a very brief introduction to the simplicity of CQRS and also show you how it can be used to handle a number of different problems that we face within the software world such as separation of concerns, security and scalability.

CQRS breaks down your interaction with a domain into commands and queries as defined below:

<ul>
  <li><strong>Command</strong> - Can change state but returns nothing (i.e. there is no query aspect to the command processing)</li>
  <li><strong>Query</strong> - Can only return values but cannot change state, i.e. has no side-effects</li>
</ul>

We keep them separate from each other, implement them on different interfaces/endpoints for the simple reason that it allows us greater flexibility on the architecture of the system. 

In many respects that is all that CQRS says and it seems quite boring which is why so much that is written about CQRS also delves into the realms of <em>Domain events</em>, <em>Event Sourcing</em> and even <em>Non-relational databases</em>. You do not need any of these in order to build a CQRS system, they are useful concepts that I will delve deeper into in later posts but they are not essential in order to get the benefits of CQRS.

I would advise that anyone attempting to do CQRS also look at <em>Domain Driven Design</em> (I will create a blog post on this later) to identify your domains and create the boundaries and interfaces between them.

<h3>Separation of Concerns</h3>

Well, the brief summary above says it all really, doesn't it? How does this really provide any benefit?

Today I'm going to start with a very simple example that I will hopefully expand upon in my later posts. I have chosen to think about what it is I need to do to look at a shop model and think specifically about the domain of the products.

As a store manager I need the ability to be able to add/remove items from the store, I need the ability to change the prices and create discounts and I need the tills to query the product information for the current price based on the barcode of the product (or pick the product from a list in the case of fresh produce).

Traditionally, as a developer I would have a product service that gave us this entire functionality:

[sourcecode language="csharp" gutter="false"]
public interface ProductService
{
    ProductList GetAllProducts();
    ProductList SearchProducts(ProductSearchCriteria criteria);
    Product     GetByBarcode(Barcode barcode);
    Product     CreateProduct(Product newProduct);
    Product     UpdateProductDetails(Product newDetails);
    Product     DeleteProduct(Product productDetails);
    Product     SetPrice(Price price);
    Product     AddOffer(Offer offer);
}
[/sourcecode]

I host this service on a PC in the store and I'm quite happy with what I have. However, what models am I using to represent this? Do I have to submit an entire product model just to change the price for that product? Technically not though keeping everything in a single interface does push the developer towards re-using models throughout the interface. Traditionally the add would return the new product including any internally generated identifier that will be uniquely used to identify the product etc.

So what would I produce in a CQRS design?


[sourcecode language="csharp" gutter="false"]
public interface ProductQueryService
{
    ProductList GetAllProducts();
    ProductList SearchProducts(ProductSearchCriteria criteria);
    Product     GetByBarcode(Barcode barcode);
}

public interface ProductCommandService
{
    void CreateProduct(NewProductCommand command);
    void UpdateProductDetails(ChangeProductDetailsCommand command);
    void DeleteProduct(DeleteProductCommand command);
    void SetPrice(SetPriceCommand command);
    void AddOffer(CreateOfferCommand command);
}

public interface ProductCommandProcessor
{
    void CreateProduct(NewProductCommand command);
    void UpdateProductDetails(ChangeProductDetailsCommand command);
    void DeleteProduct(DeleteProductCommand command);
    void SetPrice(SetPriceCommand command);
    void AddOffer(CreateOfferCommand command);
}
[/sourcecode]

So, we now have two interfaces which looks like it increases complexity but it has now separated out the two different concerns of our system. Our queries are using different models than the commands and conceptually thinking about a command will allow you to focus in on the exact details that are needed to process that command.

When we are developing the product <strong>Domain</strong> we are focussed on the <em>verbs</em> (the conceptual items that exist within the domain) and <em>nouns</em> (the actions that can be performed on those items). In a CQRS system the query service is solely concerned with extracting a data structure to represent the conceptual item but the command processor is primarily concerned with hiding the data and applying actions to the concepts. There does not need to be any overlap between the domain of the query (data structures) and the domain of the command (actual objects, using proper OO design).

In the traditional model if I wished to add in one extra piece of data to the Product model, perhaps the date that the price was set (which was already being stored) then I would have to re-compile all of my source code including the parts that solely are issuing commands to the system. In CQRS only the items that query need to be re-compiled.

<h3>Security</h3>

Given the two models above I want to now create an on-line presence as well as having a number of tills within the shop. I want to host the site within the DMZ and maintain my actual data inside the store for one reason, I don't want hackers to be able to update the details of any of my products. The immediate solution is to clone the primary database inside the LAN and ensure it is kept up to date and... 

<ul>
  <li>In the traditional model I cannot do this easily, everything is linked in a single interface and therefore I have to think about securing specific methods. The command methods can be secured so that they cannot write to the new database for security but I'm having to do more work to ensure that they do not update anything in the cloned database.</li>
  <li>In the CQRS model I can just create an instance of the query service within the DMZ and point it at the cloned database to the website. I can continue hosting the same service inside the LAN for my tills etc. Any hacker does not know the structure of my commands, the command processor is only within the LAN so the chances of them damaging either the Live database or the clone is minimised.</li>
</ul>

In my opinion it is better to only expose the Query Service to systems that only need to be able to query, you can secure down that interface/endpoint much more easily than you can in a traditional service-based approach. 

<h3>Scalability</h3>

The website is now taking off, I am getting way more visitors than I was expecting but they are now hitting my servers very hard? What do I do?

I realise that I need to increase the number of services that are available to call and place a load balancer between them. Each of those services could have its own clone of the live product data. However, the queries are expensive as there are a lot of joins etc so I need to create a de-normalised reporting database rather than a clone to get the optimum performance.

<ul>
  <li>In the traditional model I think that I would have to change the structure of the service to always point commands at the LIVE database and queries at this new reporting database. I potentially have to re-deploy the services including everything that is needed to handle the command processing. This also adds new configuration that needs to be tested so that all commands are sent to one database and queries sent to the next.</li>
  <li>In the CQRS model I can purely change the code for the query service and deploy solely that service. I have removed the need for additional configuration. I am keeping the system simple and scalable.</li>
</ul>

That is scaling of the queries but I would also like to take a look at scaling of commands. I have a number of third parties who wants to sell through my site but I know that my single command processor service cannot support that many requests. What can I do?

I want to off-line the processing of the commands, all I need to do is to create a queue and process them off-line, potentially within the LAN not the DMZ to maintain a single point of truth for my product data:

<ul>
  <li>In the traditional model I will struggle with this, the very nature of the service suggests that I will immediately return a response with the exact details that I have saved. I can choose to ignore this at my peril or I can have a mechanism that puts the information onto a queue and only returns to the client when it can find that product in the database (which it achieves by polling). This doesn't sound too good does it?</li>
  <li>In the CQRS model I simply re-implement the command interface with a new version that writes to a queue, the fact that an error has not occurred tells the client that we have accepted the command. I can scale this behind a load balancer so I can expose a number of these services. Within the LAN I can provide a background worker process (or processes) that pull data from the queue and writes them to the database.</li>
</ul>

There may not be too much difference in how we scale the querying side (bar the configuration issue and the tight coupling between the command and the query) but the command side scales much more efficiently.

<h3>Summary</h3>

In summary, I am really excited about CQRS because it seems to answer a lot of the challenges that we are facing in the software world. It is applying some of the core principles of software development, the separation of concerns and that just by looking at the interface you know whether a method has an impact on the system or whether it is just querying the system. Just one word of warning, I have shown how CQRS <em>can</em> be used to solve some of these problems but you only need to solve them when you encounter the problem.

It is not a silver bullet, it does not solve all architectural problems and there are a number of other techniques and patterns that we can apply to a system that I will delve into in later posts. However useful the other methods are none of the other techniques are necessary for CQRS and I would seriously advise that you focus on keeping it simple.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>184</wp:post_id>
		<wp:post_date>2010-10-22 14:14:54</wp:post_date>
		<wp:post_date_gmt>2010-10-22 14:14:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cqrs-keeping-it-simple</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1296520271]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>27</wp:comment_id>
		<wp:comment_author><![CDATA[Domain Events | The Ninja Ferret]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://blog.ninjaferret.co.uk/?p=221</wp:comment_author_url>
		<wp:comment_author_IP>88.208.252.132</wp:comment_author_IP>
		<wp:comment_date>2010-11-10 23:42:54</wp:comment_date>
		<wp:comment_date_gmt>2010-11-10 23:42:54</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] my previous post on software architecture on CQRS I talked about how we can apply a simple pattern for our domains with the outside world, the [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>464</wp:comment_id>
		<wp:comment_author><![CDATA[DDD9 | The Ninja Ferret]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://blog.ninjaferret.co.uk/?p=263</wp:comment_author_url>
		<wp:comment_author_IP>88.208.252.132</wp:comment_author_IP>
		<wp:comment_date>2011-02-01 01:28:31</wp:comment_date>
		<wp:comment_date_gmt>2011-02-01 01:28:31</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] and not make the mistake of over-complicating it. Thankfully, Ian takes the same approach to CQRS as I do, that is a fundamentally simple pattern separate your reads from your [...] ]]></wp:comment_content>
		<wp:comment_approved>trash</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>DDD8a - 23rd October 2010</title>
		<link>http://blog.ninjaferret.co.uk/?p=204</link>
		<pubDate>Sun, 24 Oct 2010 21:03:18 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category domain="tag"><![CDATA[Conference]]></category>

		<category domain="tag" nicename="conference"><![CDATA[Conference]]></category>

		<category><![CDATA[Conferences]]></category>

		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>

		<category domain="tag"><![CDATA[DDD]]></category>

		<category domain="tag" nicename="ddd"><![CDATA[DDD]]></category>

		<category><![CDATA[DeveloperDeveloperDeveloper]]></category>

		<category domain="category" nicename="developerdeveloperdeveloper"><![CDATA[DeveloperDeveloperDeveloper]]></category>

		<category domain="tag"><![CDATA[DeveloperDeveloperDeveloper]]></category>

		<category domain="tag" nicename="developerdeveloperdeveloper"><![CDATA[DeveloperDeveloperDeveloper]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=204</guid>
		<description></description>
		<content:encoded><![CDATA[Yesterday I attended a fantastic <a href="http://developerdeveloperdeveloper.com/ddd8a/">DeveloperDeveloperDeveloper Modern .NET Day</a> in Reading, which did mean getting up at 5am to get the train over to Reading. I was at the DDD8 earlier in the year so I was eager to get it booked a few weeks ago when registration opened, which does beg the question why I am writing a blog post to publicise the events making it harder to register next time?

This was smaller than the main event earlier in the year (which is on 29th January next year) running only two tracks but there are so many fantastic speakers in the community that I always end up torn between sessions and yesterday was no different. I can only talk about the sessions that I attended so here goes...

<h2>Session 1: WP7, iPhone, Droid - Oh My! - by Chris Hardy (<a href="http://twitter.com/chrisntr">@chrisntr</a>)</h2>

There are a number of mobile operating systems out there at the moment and developing for them can be extremely tricky. However, with work that has been done on the development of <a href="http://monotouch.net">MonoTouch</a> and the up-coming <a href="http://monodroid.net/">MonoDroid</a> .NET is becoming a single platform that will allow us to develop cross-platform solutions. 

Chris talked us through the basics behind each of the different development environments. 

Windows Phone 7 is the environment that allows us to develop in the environment that we are generally most familiar with, Visual Studio 2010. This is extremely familiar to the Silverlight developers as developing for Windows Phone 7 is in Silverlight, we can design the interface within the XAML and Silverlight forces us to separate our user interface from the business logic. There are new controls for the phone, the <em>Panorama</em> control and the <em>Pivot</em> control that gives the phone its distinctive look and feel.

The next was MonoTouch using .NET to write onto the iPhone, and yes Apple have relented to allow MonoTouch applications to run on their phones. There is a 20MB limit to the size of applications that can be loaded to the AppStore and because libraries cannot be shared between applications each application needs its own copy of the runtime. MonoTouch does not have the full .NET API but has the libraries that people tend to use the most and this tends to be a super-set of the libraries available to Silverlight developers. You have to develop the user interface in Apple's Interface Builder and then hook your own business logic into the interface. Due to the constraints placed by Apple it is only really possible to develop and debug in Mac OS X as it is tied to the interface builder and the simulator.

A single development licence is $399 which gives you a licence to develop on that platform forever, however, you will need to renew each year in order to get continuing updates of the product.

Finally, MonoDroid is the equivalent of the MonoTouch for Google's Android Phone and is currently is in the preview (not alpha or beta) mode. The interface building tools for Android are less developed than for the other operating systems but again the interface is designed in XML. The Android development SDK is available to all operating systems and currently it MonoDroid is available for development within Visual Studio but eventually a MonoDevelop plugin will be developed. When it is released expect MonoDroid to have the same pricing model as MonoTouch.

The basics that I took from Chris was that, there may be some problems with a few libraries (Chris created a non-JIT version of the JSON parsing assembly) but each of three platforms separates out the interface from the business logic therefore make sure that when you are developing your projects it should be possible to maintain one set of business logic and have just different presentations of that logic.

<h2>Session 2: Packaging in the .NET World - by Sebastian Lambla (<a href="http://twitter.com/serialseb">@serialseb</a>)</h2>

Over the past few years the .NET community has been catching up with other areas of the software development world and has started producing its own open source software. Traditionally we either relied on Microsoft to develop everything that we needed or that other third parties would provide frameworks that you would buy in with guaranteed support.

With open source software we are building dependencies into our software on the open source frameworks that we use but these frameworks are constantly changing, constantly evolving and often have complicated dependencies. As Seb pointed out people often download a particular version of a framework and then stick to it regardless of whether a newer, better, version is available, why? They are afraid of breaking changes.

Seb took us though the history of the package management solutions that have been available within the open source world for a long time (e.g. <em>apt-get</em>) through to the latest offerings from himself (<a href="http://www.openwrap.org/">Open Wrap</a>) and Microsoft (<a href="http://nupack.codeplex.com/">NuPack</a>).

The most recent history between Microsoft and Seb has been an interesting view from the outside. It was known that Seb was busy building a package manager but Microsoft were busy developing something of their own in secret and only when they had completed it did they announce it to the community. 

However, OpenWrap was the primary focus of the talk showing how easy it was for us to create and manage our dependencies. One advantage the NuPack has over OpenWrap at the moment is the integration with the Visual Studio - Seb will argue with me on this point but in order to get through to the standard developer eventually the integration will be required. From the command line I think that we have more power than we would through the Visual Studio interaction and OpenWrap has a distinct advantage over NuPack, it supports the NuPack format.

No longer do you need to download an assembly and do "Add Service Reference" as OpenWrap hooks itself into the build process and automatically references the appropriate packages. It also has a plugin for Resharper that allows Resharper to detect the files even though they are not referenced by the project. 

I think that OpenWrap is a very powerful and useful package manager and I am seriously looking forward to working with it.

<h2>Session 3: Is NoSQL the Future of Data Storage? - by Gary Short (<a href="http://twitter.com/garyshort">@garyshort</a>)</h2>

Gary was talking about the NoSQL is a movement that has risen over the last few years and is centred around the concept that Relational Databases are not tuned to being easily scalable, or even tuned to the demands of modern scalable systems. Twitter, Facebook and even Google have shunned standard relational databases in favour of other database models that are more tuned to their own needs. Gary started out by explaining that "NoSQL" really did mean "Not Only SQL" as there is never one absolute solution to any problem and relational databases do have their place in the world.

NoSQL databases come in varying shapes and sizes, object databases, graph databases and even document databases.

Gary talked us through why the traditional relational database came into being, normalised data saves space! One of the other concerns was that the data should be in the same place (on the same tape) which means that it could be read efficiently. In the 60s, 70s and 80s the space that was needed to store data was in a premium and therefore having a normalised database means that most data is stored in one place and one place only. However, there is a cost with a normalised database, every query that performs a join has to read data from several tables and combine them into a single results set.

Non-relational databases such as RavenDB work on a completely different model. RavenDB is a document database, which means it stores all the information relating to a document in a single place. This means that we have extremely fast writes (as the transaction is to write to that single place) and also we have extremely fast reads of the data because we have all the data that we require and the server is fairly dumb. For RavenDB we create our indexes in .NET using Linq and effectively create "materialised view" of the required records and can even render different object models using those views, these indexes are "eventually consistent" as when a change is written a background process on the server re-builds the indexes but that could take time. The only problem is the ad-hoc queries you can perform on SQL. The documents are denormalised and you are potentially storing more data but in these days do we care about that? It is so easy to shard the data using RavenDB that if we are stressing a single server whereas in a relational database model sharding the data is not that easy (and yes it is possible).

I think the simple conclusion is that we have to use relational databases for things that need to be consistent, transactional etc but in other cases where we need fast reads/writes, scalable then it is worth checking out the various types of Non-SQL databases out there.

<h2>Lunchtime Grok Talks</h2>

As always there were some lunchtime Grok talks where people come forward to give a short presentation during lunch to the people attending the conference.

We had Guy Smith-Ferrier (<a href="http://twitter.com/GuySmithFerrier">@GuySmithFerrier</a>) giving a 20/20 talk, which is 20 slides at 20s per slide, on why twitter is so great or rather "Why using twitter will get you more sex" or something like that. It was a very interesting and cool talk but for me there was one reason - so much is now being communicated using twitter.

There was a talk about using F# as a BDD framework with the <a href="http://tickspec.codeplex.com/">tickSpec</a> framework. It is an interesting concept and deserves a further look into.

Finally we had Ross Scott talking about the costs involved with running on the Azure framework. One interesting point that was raised within this talk is that you really need to run two instances of your roles, primarily the web roles, as Microsoft can bring your role down to patch the virtual machine, or move the machine over to another part of the cloud where it is less busy. 

<h2>Session 4: Modern C#: This is not your grand-daddy's language by Jon Skeet (<a href="http://twitter.com/jonskeet">@jonskeet</a>)</h2>

Jon turned up to show us how C# has evolved over the years and to force us to think about what we want from our languages and where we could go in the future. Far more importantly he was joined by his trust companion <em>Tony the Pony</em> who, according to Jon, isn't a very good developer...

There was a time warp back to the days when C# was new, when C# didn't have generics, or lambda expressions or linq. Back in those days did we think it was a horrible language to work within? Not really, as Jon pointed out C# is a good language and back in the day it was a nice easy language with a massively powerful framework behind it. Development was actually quite easy.

Along came generics... then came Linq and lambda expressions... did they made the language harder? No, they made it easier. It has become much easier to express intent with C# rather than focussing the implementation. Languages are evolving to focus more on what we are trying to do rather than how to do it and that is not a bad thing. Jon described this in terms of driving, the driver doesn't actually care about the mechanism that turns the wheels, they only care about their interaction with the steering wheel. 

The things that I will take away from this talk are to learn other languages and understand why they are different and what the advantages and disadvantages of each language is but also to read things that I know that I disagree with and understand why I disagree with it because in doing so I am learning more about my programming language, what I want from my programming languages and myself.

<h2>Session 5: WPF in Modern .NET - Ian Griffiths</h2>

Ian spent a lot of time focussing on the controversy that has surrounded WPF in recent months. It has been suggested that WPF was dead but there is a massive effort going into WPF at the moment and as Silverlight is a sub-set of WPF (though implemented in a different way) and the new Windows Phone 7 makes use of Silverlight it is likely that WPF is going to be around for a while. 

There was a discussion of the Model View ViewModel pattern and how this can benefit Silverlight.

By this point I think that my mind had actually started to fade at this point and I can't remember too much about this talk (sorry Ian).

<h2>Geek Dinner</h2>

So at the end of the day we drifted back into central Reading and went to Revolution bar for a few drinks and more chat. There was a good buzz about the people there and they all seemed to have had a good day. We headed off to Pizza express and continued the discussions there including talking about how the DeveloperDeveloperDeveloper organisers are all eager to encourage new speakers and new people. I think that for January I want to actually present a grok talk and maybe the time after that I'll have the confidence to sit up and submit an entire session and I would encourage anyone reading this to think about giving a presentation.

Thanks very much to Phil and the organisers of the event and thanks to the speakers for giving us some very interesting talks. 
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>204</wp:post_id>
		<wp:post_date>2010-10-24 21:03:18</wp:post_date>
		<wp:post_date_gmt>2010-10-24 21:03:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ddd8a-23rd-october-2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1287954200]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>477</wp:comment_id>
		<wp:comment_author><![CDATA[Diflucan]]></wp:comment_author>
		<wp:comment_author_email>Fukuda8@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://noprorogue.whyweprotest.net/member.php?u=5590</wp:comment_author_url>
		<wp:comment_author_IP>83.241.11.192</wp:comment_author_IP>
		<wp:comment_date>2011-02-10 00:34:52</wp:comment_date>
		<wp:comment_date_gmt>2011-02-10 00:34:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I'll gear this review to 2 types of people: current Zune owners who are considering an upgrade, and people trying to decide between a Zune and an iPod. (There are other players worth considering out there, like the Sony Walkman X, but I hope this gives you enough info to make an informed decision of the Zune vs players other than the iPod line as well.)]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>478</wp:comment_id>
		<wp:comment_author><![CDATA[cheap Diflucan]]></wp:comment_author>
		<wp:comment_author_email>Sosby9@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.runescapechat.com/forum/member.php?u=329779</wp:comment_author_url>
		<wp:comment_author_IP>83.241.11.192</wp:comment_author_IP>
		<wp:comment_date>2011-02-10 01:04:50</wp:comment_date>
		<wp:comment_date_gmt>2011-02-10 01:04:50</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[There are certainly a couple more details to take into consideration, but thank you for sharing this information.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>479</wp:comment_id>
		<wp:comment_author><![CDATA[Boss]]></wp:comment_author>
		<wp:comment_author_email>Fulenwider@ymail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.diveguide.com/forums/members/selectivetheory.html</wp:comment_author_url>
		<wp:comment_author_IP>83.241.11.192</wp:comment_author_IP>
		<wp:comment_date>2011-02-10 15:10:19</wp:comment_date>
		<wp:comment_date_gmt>2011-02-10 15:10:19</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I feel like you could probably teach a class on how to make a great blog. This is fantastic! I have to say, what really got me was your design. You certainly know how to make your blog more than just a rant about an issue. Youve made it possible for people to connect. Good for you, because not that many people know what theyre doing.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>475</wp:comment_id>
		<wp:comment_author><![CDATA[Cam Girls]]></wp:comment_author>
		<wp:comment_author_email>Hirtz@yahoo.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.girlcamstrip.com/</wp:comment_author_url>
		<wp:comment_author_IP>173.208.57.7</wp:comment_author_IP>
		<wp:comment_date>2011-02-07 03:09:08</wp:comment_date>
		<wp:comment_date_gmt>2011-02-07 03:09:08</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[She watched his hand resting on the gearshift lever. It was such a nice, masculine hand, with thick fingers and prominent knuckles.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Registering for Windows Phone 7 Development</title>
		<link>http://blog.ninjaferret.co.uk/?p=216</link>
		<pubDate>Mon, 08 Nov 2010 12:35:41 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category><![CDATA[.NET]]></category>

		<category domain="category" nicename="net"><![CDATA[.NET]]></category>

		<category><![CDATA[C#]]></category>

		<category domain="category" nicename="c"><![CDATA[C#]]></category>

		<category><![CDATA[Platform]]></category>

		<category domain="category" nicename="platform"><![CDATA[Platform]]></category>

		<category domain="tag"><![CDATA[Registration]]></category>

		<category domain="tag" nicename="registration"><![CDATA[Registration]]></category>

		<category><![CDATA[Windows Phone 7]]></category>

		<category domain="category" nicename="windows-phone-7"><![CDATA[Windows Phone 7]]></category>

		<category domain="tag"><![CDATA[Windows Phone 7]]></category>

		<category domain="tag" nicename="windows-phone-7"><![CDATA[Windows Phone 7]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[This should be a short post about my experiences registering for the Microsoft App Hub so I can develop some applications for Windows Phone 7. I'm working on my first XNA game at the moment and have a few other application ideas that I need to develop over time so I thought that I would start registering in advance as an incentive to actually getting things done.

<h2>Signing-up</h2>

Signing-up is really quite easy, simply go to http://create.msdn.com/en-US/ and follow the process to join. You will need:

<ol>
  <li>A Windows Live Id - I chose to register with my existing one but you may want to create a specific account just for managing your account</li>
  <li>£65 to register - though free if you're a student</li>
  <li>Details of your/your company's address etc</li>
</ol>

Following the instructions, I thought, that was easy... I received two e-mails:

<ul>
  <li>from the Microsoft App Hub with an e-mail verification link</li>
  <li>from Microsoft's verification partner GeoTrust with a link to one of their pages. You have the option now to Approve of Reject your application.</li>
</ul>

<h2>Identity Verfication</h2>

So that was it, wasn't it? Well, not really. I now had the ability to access the app hub and even though I was not ready I could submit an application etc though I was constantly being told that I was not verified yet.

It is not explained very clearly what the stages of verification are and I found out more by trawling the <a href="http://forums.create.msdn.com/forums/">forums</a> and seeing that a number of people were as confused as me about the verification procedure. From what I can see you need to submit something before the next stage of verification occurs, even if you aren't ready to submit your app yet submit something partially and delete it later was the advice.

I tried that and waited for a while for someone to contact me about verification until I got bored (a couple of days) and I went onto the GeoTrust site and used their online support chat to talk to one of them who forwarded me an e-mail containing the next stage.

I had to send back a scan of a form which contained some government issued photo ID, passport or driving licence. Shortly after sending them the e-mail I was then verified and felt a lot calmer about things.

<h2>Bank Accounts</h2>

I tried registering one of my bank accounts but unless I had a specific tax number the form would not submit. I believe that as a UK citizen I should to go to the US Embassy in London to deal with the IRS office there in order to get the forms appropriately filled in and sent off to the IRS to gain my ITIN (if you go remember to ensure that you take as much documentation as you can as they are probably going to want to verify identity etc).

Microsoft provide a letter that must be attached to the application and there are some UK residents who are saying that the IRS people at the embassy dislike the phrasing of that letter basically saying that you "<strong>maybe</strong> receiving a payment" in the next financial year, which is true since if no one buys your app then you don't get paid. However, I think that Microsoft will have discussed this letter with the IRS and therefore the local embassy staff should let this through.

Having said all of this I have not yet done this, my app is still a few weeks away from being live on the market place and even then I am not guaranteed to get any returns on that app. If it looks like I am going to earn a significant enough amount then I will go to the trouble of getting a ITIN.

<h2>The XBox Live Gotcha</h2>

At one point the APP HUB dashboard stopped working, every link would re-direct me back to the main page. I was getting highly frustrated and so were other people on the forum but then the answer came

I didn't have an XBox Live account before I got my phone, as strange as that may sound, but I got one when I got the phone. Shortly after that the terms and conditions on XBox Live changed but I had never been to that site so I had not accepted them. This was what was causing the dashboard to fail, I went to the XBox Live site and accepted the terms and conditions then shortly after the APP HUB dashboard started working again. 

<h2>Summary</h2>

I don't think that this process has been that hard so far and I can understand all of the requirements and all of the steps that I have had to go through but I found the process fairly frustrating due to the lack of documentation that surrounds the process. I know that I am an impatient person at times and therefore maybe someone more patient would have fewer frustrations as things would naturally happen.

Still, can't wait to get my app on the market place! I'll blog about that soon.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2010-11-08 12:35:41</wp:post_date>
		<wp:post_date_gmt>2010-11-08 12:35:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>registering-for-windows-phone-7-development</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1289229655]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>480</wp:comment_id>
		<wp:comment_author><![CDATA[vuitton bag]]></wp:comment_author>
		<wp:comment_author_email>ffafadsf@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.betfirms.com/forums/member.php?u=833</wp:comment_author_url>
		<wp:comment_author_IP>222.73.218.225</wp:comment_author_IP>
		<wp:comment_date>2011-02-11 17:32:45</wp:comment_date>
		<wp:comment_date_gmt>2011-02-11 17:32:45</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[I consider, that you commit an error. Write to me in PM, we will discuss.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>481</wp:comment_id>
		<wp:comment_author><![CDATA[vuitton bags]]></wp:comment_author>
		<wp:comment_author_email>ffafadsf@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://ablyproducts.com/memberlist.php?mode=viewprofile&amp;u=71</wp:comment_author_url>
		<wp:comment_author_IP>222.73.218.225</wp:comment_author_IP>
		<wp:comment_date>2011-02-11 18:08:18</wp:comment_date>
		<wp:comment_date_gmt>2011-02-11 18:08:18</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Amazingly! Amazingly!]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>482</wp:comment_id>
		<wp:comment_author><![CDATA[louis vuitton bag]]></wp:comment_author>
		<wp:comment_author_email>ffafadsf@gmail.com</wp:comment_author_email>
		<wp:comment_author_url>http://greatlimerickrun.com/phpbb3/memberlist.php?mode=viewprofile&amp;u=94787</wp:comment_author_url>
		<wp:comment_author_IP>222.73.218.225</wp:comment_author_IP>
		<wp:comment_date>2011-02-12 02:15:52</wp:comment_date>
		<wp:comment_date_gmt>2011-02-12 02:15:52</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[It is a pity, that now I can not express - it is very occupied. I will return - I will necessarily express the opinion on this question.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>473</wp:comment_id>
		<wp:comment_author><![CDATA[ip camera]]></wp:comment_author>
		<wp:comment_author_email>Kight280@yahoo.com.uk</wp:comment_author_email>
		<wp:comment_author_url>http://www.im.tv/blog/3443936</wp:comment_author_url>
		<wp:comment_author_IP>64.246.18.25</wp:comment_author_IP>
		<wp:comment_date>2011-02-05 21:26:14</wp:comment_date>
		<wp:comment_date_gmt>2011-02-05 21:26:14</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Great piece of data that you've received on this web site submit. Hope I might get some additional of the stuff on your own website. I will occur again.]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Domain Events</title>
		<link>http://blog.ninjaferret.co.uk/?p=221</link>
		<pubDate>Wed, 10 Nov 2010 23:42:50 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category domain="tag"><![CDATA[Architecture]]></category>

		<category domain="tag" nicename="architecture"><![CDATA[Architecture]]></category>

		<category><![CDATA[Domain Events]]></category>

		<category domain="category" nicename="domain-events"><![CDATA[Domain Events]]></category>

		<category domain="tag"><![CDATA[Domain Events]]></category>

		<category domain="tag" nicename="domain-events"><![CDATA[Domain Events]]></category>

		<category><![CDATA[Software Architecture]]></category>

		<category domain="category" nicename="software-architecture"><![CDATA[Software Architecture]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=221</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>Architecture Series Overview</h2>

I have recently become increasingly interested in how we, as developers and architects, structure the systems that we are creating. The demands on on-line systems are significantly different to the demands on desktop only software. Scalability, robustness, performance, resilience are all important factors when thinking about on-line services and there has been a lot of debate within the software world about how we should architect these systems. These posts are my views of interesting architectural patterns and practices that I have been looking at:

<ol>
  <li><a href="http://blog.ninjaferret.co.uk/?p=184">CQRS: Keeping it simple</a></li>
  <li><strong>Domain Events</strong> is right here</li>
</ol>

<h2>Domain Events Introduction</h2>

In my previous post on software architecture on <a href="http://blog.ninjaferret.co.uk/?p=184">CQRS</a> I talked about how we can apply a simple pattern for our domains with the outside world, the separation of the command from the query gives us many advantages but does not solve all of our problems. 

In this post I hope to briefly explain the architecture of how we can use Domain Events, some of the advantages of using them followed by some of the perceived complexities of using them. I have not gone into any technical implementation detail here but I will come onto this in a later post. 

<h2>Multiple Domains</h2>

In a large enterprise there are going to be a number of domains but these domains do not sit in isolation as business processes sit on top of the domain. For example, in an on-line store you may have a <strong>supplier management domain</strong>, a <strong>billing domain</strong>, a <strong>warehouse management domain</strong> and an <strong>order management domain</strong> and business processes will cover all of these domains, for example (this is not an optimal workflow and would annoy most customers but bear with me for this example):

<blockquote>
When someone places an order it is sent to the warehouse for processing and the user is billed. In the warehouse, each item needs to be located and added to the package. Once billing and packaging is complete it can be dispatched to the customer. If the item is out of stock then we order more of the item from the supplier but if the supplier tells us that there is a long lead time for the item then we have to notify the customer and let them make a choice about whether to cancel or not, if they choose to cancel then we should refund them for the price of that item.
</blockquote>

So how do we handle the communication between domains? Should the order domain know about the warehouse domain and issue commands? Well, if that was the only consumer of the order then I guess that would be OK but the billing system will also want to know about the order. Actually, they are both interested that an order has been placed but both will respond to that <em>event</em> in different ways. 

<h2>Transferring data between domains</h2>

When we are looking at our domains we have a number of points where something has happened in our domain that has an effect on the processing within other domains so how can we handle this?

<ul>
  <li>Have a single database where every domain is always up to date (though we can run into scalability and performance issues here)</li>
  <li>Have some form of data transfer between the different databases that then goes away behind the scenes manipulating data in the destination systems</li>
  <li>Raise an event and the interested domains can consume that event</li>
</ul>

So when our order is placed and the <em>orders domain</em> has done all of the checks that it needs then it will raise an <strong>New Order Event</strong> and publish that to the outside world. Any domain can then receive and act based upon that event. In my example so far the warehouse management system will compile the list of items, work out how big a package they should go in, check the stock levels and create a work order for someone to process the order and that order goes on to the queue. At the same time the billing system is retrieving the customer's details and charging them for the total amount. 

So what events would be needed to satisfy the example above?

<ul>
  <li><strong>Order Placed Event</strong> from the <em>orders domain</em> - consumed by the <em>billing domain</em> and the <em>warehouse domain</em></li>
  <li><strong>Payment Completed Event</strong> from the <em>billing domain</em> - consumed by the <em>warehouse domain</em></li>
  <li><strong>Missing Stock Event</strong> from the <em>warehouse domain</em> - consumed by the <em>supplier management domain</em></li>
  <li><strong>Stock Estimated Arrival Event</strong>t from the <em>supplier management domain</em> - consumed by the <em>orders domain</em></li>
  <li><strong>Cancel Order Item Event</strong> from the <em>orders domain</em> - consumed by the <em>warehouse domain</em></li>
</ul>

I think that there are other events, even if they are not currently consumed in the process, that may need to be raised (e.g. when a payment fails) which we may need to trap. Perhaps the greatest difficulty in this pattern is knowing what events people are going to need to isolate yourself from needing to change when a new system comes along.

<h2>What are the benefits?</h2>

There are many of you out there at the moment who are going "why don't you just have an ETL task to populate related databases with the appropriate information?" and that is a valid pattern to use, so the question becomes why use Domain Events?

<h3>1. Extensibility</h3>

Let us say that sometime in the future I want to send a printed invoice to the customer independent of the actual package when an order has been paid, this is a little contrived but bear with me, then using most other techniques I have to write an entire new integration system. With Domain Events I already have all of the integration points that I need because I can subscribe to the <strong>Payment Completed Event</strong> and  retrieve the order information from the order query service (using <a href="http://blog.ninjaferret.co.uk/?p=184">CQRS</a>) then print out the invoice and send it.

Another approach would be to prepare the invoice when the <strong>Order Placed Event</strong> is received but only send it when the <strong>Payment Completed Event</strong> is received but delete the invoice if the <strong>Payment Failed Event</strong> is received. 

<h3>2. Implementation Isolation</h3>

Each implementation of your system is completely isolated from every other implementation. Using Domain Events if I choose to implement a new billing system, using a different language or even using a different database I can do without having to change anything but that domain. The inputs to the domain are known, the Commands from <a href="http://blog.ninjaferret.co.uk/?p=184">CQRS</a> and the <strong>Domain Events</strong> from the other systems. Also my outputs are well defined, my outputs are the <strong>Domain Events</strong> and the Queries from <a href="http://blog.ninjaferret.co.uk/?p=184">CQRS</a>.

Using ETL etc then we are having to do more work in the background to move data into this new system, into the new data structure, rather than forcing the outside world to conform to the technical implementations of the domain using <strong>Domain Events</strong> we are forcing ourselves to comply with our own domain.

<h3>3. Logging</h3>

By definition an event within a domain is something that is extremely important and should contain a lot of important information about the action that has just transpired. Logging at this level means that we are recording all of the important information that is happening within the system and we can do this without actually needing to write much specific logging, we can create a logging component/domain that subscribes to these events and records them. 

<h3>4. Design and Documentation</h3>

I know, this is something that every developer finds dull and boring, but when you are designing your systems and how they interact you are now thinking in terms of the events that each domain is raising and consuming and this will give us a very simple way to document our business processes at a high level.

<cite>
<strong>ORDERS DOMAIN</strong>
&nbsp;<em>Raises: Order Placed Event</em>
&nbsp;&nbsp;Consumed by:
&nbsp;&nbsp;&nbsp;&nbsp;- Warehouse Domain
&nbsp;&nbsp;&nbsp;&nbsp;- Billing Domain
&nbsp;<em>Raises: Cancel Order Item Event</em>
&nbsp;&nbsp;Consumed by:
&nbsp;&nbsp;&nbsp;&nbsp;- Warehouse Domain
&nbsp;&nbsp;&nbsp;&nbsp;- Billing Domain
&nbsp;&nbsp;<em>Consumes: Stock Estimated Arrival Event</em>
&nbsp;&nbsp;&nbsp;&nbsp;- Gives user the chance to cancel
</cite>
<cite>
<strong>BILLING DOMAIN</strong>
&nbsp;<em>Raises: Payment Completed Event</em>
&nbsp;&nbsp;Consumed by:
&nbsp;&nbsp;&nbsp;&nbsp;- Warehouse Domain
&nbsp;<em>Consumes: Order Placed Event</em>
&nbsp;&nbsp;&nbsp;&nbsp;- Bills the user and raises the Payment Completed Event
&nbsp;<em>Consumes: Order Cancelled Event</em>
&nbsp;&nbsp;&nbsp;&nbsp;- Issues a refund back to the user
</cite>

This is not the entire documentation for the process defined but it helps to show how easy it is to document and hopefully how easy it is to follow. We will have to build this documentation anyway as we are designing our systems and there is little there that we could not take directly to the users and discuss with non-technical business experts.

<h2>Areas of concern?</h2>

It all sounds extremely simple doesn't it? So where does the complexity lie?

There are a number of different problems that happens when we get into using domain events. The way that we design our systems needs to change and we need to take into account these concepts when we are designing our systems.

<h3>1. Reliable Messaging</h3>

We are busy raising events in our systems and assuming that they will reach all of the consumers of those events. How can we be sure that this is the case? This is where reliable messaging comes into the frame. 

A reliable messaging system, such as <a href="http://nservicebus.com/">NServiceBus</a>, will ensure that when you publish a message it will ensure that all messages will be delivered to the consumers. The delivery mechanism used by NServiceBus is to use a queuing mechanism allowing the receiver to pull the messages at a speed that they can cope with. One way to guarantee delivery is that taking the item from the queue and the end of the process is maintained in a distributed transaction so that should any component fail the message ends up back on the queue to be retrieved again at a later date.

However, another mechanism that could be applied is for each domain to send a standard acknowledgement of the event and reports if an error has occurred or a message has disappeared from the queue without being acknowledged then the event is replayed into the system. 

<h3>2. Eventual Consistency</h3>

In a traditional system, where all processing is completed in a single transaction, we are separating out the processing, distributing it between domains so there is a temporal cost to the processing. The data across all domains may not be consistent at the very moment that the data returns to the user, the data is being processed in the background and will eventually be consistent. 

What does this mean? If I am running a website and the user has just submitted some data then when the page refreshes the data may not appear for the customer, a few seconds/minutes later the page may accurately display the current state of the system. One suggestion for this is that the user interface uses a bit of trickery and actively fools the user for a few seconds by making it appear that their command has already been processed. 

<h3>3. How do I handle queries?</h3>

In looking at the <strong>Domain Events</strong> they look very similar to the Commands from CQRS, I think that the main difference between them is that the <strong>Domain Event</strong> is driven by internal forces within the organisation whereas the commands are external, from users or even from third-party applications.

So what happens about queries? Well, the domains should contain enough information within themselves to successfully process the command but the domains are still exposing queries to the world for external systems to communicate with them. There is nothing to stop the generation of new composite services that will gather data from several different domains and present a unified query model.

<h2>Conclusion</h2>

<strong>Domain Events</strong> provide us with a loose coupling mechanism for communication between domains. They allow us to define our interactions, our inputs and out outputs that are focussed on the delivery of the domain, hopefully keeping the domain simple and easy to implement/re-implement as necessary. They work well with CQRS, which says that the commands should be split from the queries, but does not immediately handle how communication should occur between the domains whereas <strong>Domain Events</strong> focusses us on how the domains interact.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>221</wp:post_id>
		<wp:post_date>2010-11-10 23:42:50</wp:post_date>
		<wp:post_date_gmt>2010-11-10 23:42:50</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>domain-events</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1296512396]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>28</wp:comment_id>
		<wp:comment_author><![CDATA[CQRS: Keeping it simple | The Ninja Ferret]]></wp:comment_author>
		<wp:comment_author_email></wp:comment_author_email>
		<wp:comment_author_url>http://blog.ninjaferret.co.uk/?p=184</wp:comment_author_url>
		<wp:comment_author_IP>88.208.252.132</wp:comment_author_IP>
		<wp:comment_date>2010-11-11 16:33:39</wp:comment_date>
		<wp:comment_date_gmt>2010-11-11 16:33:39</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[[...] Domain Events [...] ]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type>pingback</wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>Barcamp London 8</title>
		<link>http://blog.ninjaferret.co.uk/?p=251</link>
		<pubDate>Wed, 17 Nov 2010 18:14:34 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category domain="tag"><![CDATA[Bar Camp]]></category>

		<category domain="tag" nicename="bar-camp"><![CDATA[Bar Camp]]></category>

		<category><![CDATA[BarCamp]]></category>

		<category domain="category" nicename="barcamp"><![CDATA[BarCamp]]></category>

		<category><![CDATA[Conferences]]></category>

		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>

		<category domain="tag"><![CDATA[Conferences]]></category>

		<category domain="tag" nicename="conferences"><![CDATA[Conferences]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[Last weekend I got to attend the delayed <a href="http://eight.barcamplondon.org/">BarCamp London 8</a> and had a fantastic time meeting people from a variety of backgrounds and people from across Europe. About 250 people descended on London for BarCamp bringing with them their thoughts, ideas, topics for sessions, computers, guitars, amps etc

I have to say a massive thank you to all of the organisers and crew of BarCamp for a fantastic weekend, they arranged the venue, got loads of sponsors, tidied up after us, arranged our meals and generally ran around constantly to keep the event running smoothly. Huge thanks has to go to the City of London University for providing us one of their buildings for several days, letting us stay overnight and trusting us not to destroy everything, it was a great venue for a conference as there were plenty of lecture rooms for presentations with all the equipment anyone could need. Also, thanks to the sponsors who made the conference possible, the event was totally free and we were provided with all our meals, coffee, drink, our personalised t-shirts from <a href="http://spreadshirt.co.uk">spreadshirt</a> and other freebies. Finally, I have to thank everyone who attended, an unconference only works because of those who attend, who give sessions and contribute in every way.

For those of you who do not know what Bar Camp is then you might already have got the idea by now, a horde of people descend on a venue for a weekend's unconference and by that I mean that there is no set agenda, you do not know what topics will be discussed until you are there. The day is broken up into segments of 20 to 30 minutes and people use the advanced technology of pieces of paper with their ideas written on it that they just stick in a particular time slot in a particular room (which is interesting to see how popular people think their session will be by how large the room is that they have chosen). The topics, therefore, are particularly random and vary from how electronic guitars work, The Secret Life of Bees, British Sign Language, Cupcakes for Geeks to more technical talks on HTML 5, Security and the new <a href="http://openwrap.org">OpenWrap package management system</a>.

Here is a very brief, and incomplete, list of everything I remember:

<h2>1. <a href="http://lanyrd.com/2010/barcamp-london-8/srxg/">Windows Phone 7 Development</a></h2>

This talk was given by Jess Meats (hope I got the name right) about how easy and simple it is to develop for Windows Phone 7. She admits that she is not a developer but she has developed a "build your own adventure" game for Windows Phone 7 and talked us through how easy she found it. 

The tools are free to download and provide you with a simple mechanism for writing apps in Silverlight and writing graphical games in XNA.

There were a number of people who had experienced problems with registering for the APP HUB, the process of registering with GeoTrust seems to be unexplained and confusing to people with some people needing a notary to sign their documents (other people don't seem to have needed that so far) and in general the Terms and Conditions changing on XBox Live confused a few people as you needed to visit that site to make anything work. 

One other really good hint for people who run Windows on a VM on Mac - Parallels will not allow you to run the emulator because it is a VM inside a VM but somehow VMware Fusion will let you.

<h2>2. <a href="http://lanyrd.com/2010/barcamp-london-8/srtm/">Simple.Data</a></h2>

<a href="http://twitter.com/markrendle">Mark Rendle</a> presented his take on how to make data access easy. Microsoft have released their "Microsoft.Data" assemblies to try to make data access simpler to attract PHP developers onto the Microsoft platform, however, most .NET developers really do not like seeing SQL queries embedded in their web page. 

Mark's elegant solution is <a href="https://github.com/markrendle/Simple.Data">Simple.Data</a> which is a dynamic library that given a connection string will find the meta data for the database and give you a fluent (and safe) interface onto the data so rather than:

<blockquote>database.Execute("SELECT * FROM BlogPosts WHERE Id = 12")</blockquote>

You can do:

<blockquote>database.BlogPosts.FindById(12)</blockquote>

This looks very cool and intuitive, it is missing intellisense so you need to know your database schema but is a nice light and extensible framework for building data access. Someone could easily build a twitter data source for this framework.

<h2>3. <a href="http://lanyrd.com/2010/barcamp-london-8/srwf/">How to work well with techies</a></h2>

<a href="http://twitter.com/uniquejosh">Josh</a> started what was my first "discussion session" where he wanted to find out from people how, as a business orientated person, he could better work with techies. How does a business person get the best out of their technical staff?

One of the key concepts that was emerging was the fact that there needs to be trust:

<ul>
  <li>The business need to have trust in their developers/techies, trust that things will get done, trust that they will ask rather than assuming</li>
  <li>The developers/techies need to trust that the business have an idea about what they want, that they will be available when questions arise, that they will understand when we say something is difficult etc</li>
</ul>

How you build that trust is through good and regular communication, it is a team after-all and there should be collective responsibility. It is also important to recognise that not every developer has a uniform set of skills, strong points and weak points, some of the most amazing developers would never be able to hold a business-level conversation so then you need to have a broad range of skills on your team. "Techies are people too" was a phrase I came out with, we are all individuals and as such have different needs and different things to offer, getting to know your techies will allow you to understand more about how to work with them.

<h2>4. <a href="http://lanyrd.com/2010/barcamp-london-8/srwz/">Books for freaks</a></h2>

A great discussion where people talked about the books they would be eager to recommend, people were great at selling the books because they were so passionate about them and there is an <a href="http://www.amazon.co.uk/lm/R29F5NM5ZPV7QS/">Amazon list</a> of the books mentioned, though missing <a href="http://www.amazon.co.uk/Jasper-Fforde/e/B000APXZAC/ref=sr_tc_2_0?qid=1290015897&sr=8-2-ent">Jasper Fforde</a>.

I now have way too much to read.


<h2>5. <a href="http://lanyrd.com/2010/barcamp-london-8/sryx/">British Sign Language</a></h2>

<a href="http://twitter.com/lallyd">Lalita D'Cruze</a> ran what was, in my opinion, the best session that I attended. It was a fantastic introduction to BSL and I came away from a 20 minute talk able to say "Hello, my name is Ian. I work as a computer engineer", had a greater understanding of deaf etiquette and also had a fun time with some of the anecdotes that Lalita was passing on as she taught us. 

It was a session that left me buzzing and has been the session that I probably talked about most with my friends over the last few days so a big thank you to Lalita. I may even take up some lessons.

<h2>6. Evening...</h2>

So with the sessions over for the first day we settled down to an evening of pasta, talking, quizzes, werewolf and most importantly drink. Sometime early Sunday I was involved in the first ever recording of the song Zombie Dawn to the "Battle Hymn of the Republic"  followed by watching the Hangover, some karaoke and then finally sleep for about 3 hours before giving up and deciding to stay awake.

<h2>7. <a href="http://lanyrd.com/2010/barcamp-london-8/stcc/">From Faraday to Fender: the Physics of the Electric Guitar</a></h2>

This was another great talk about a subject I would never have gone into much detail about in my daily life. <a href="@dylanbeattie">Dylan</a> took us through an entertaining journey from how guitar strings vibrate to produce their distinctive sound to the pick-ups to how the amps work and the history of the power chord. I don't think that I'll ever be in a mind to wind my own pickup but apparently 4 days of fun with a drill slowly winding a very fine thread can be a bit tedious and it's much less effort to buy them.

<h2>8. <a href="http://lanyrd.com/2010/barcamp-london-8/stdf/">OpenWrap: .NET package management</a></h2>

<a href="http://twitter.com/danielirvine">Daniel</a> took us thorough introduction to the <a href="http://openwrap.org">Open Wrap Package Management</a> system for .NET written by a mutual friend <a href="http://twitter.com/serialseb">Sebastian Lambla</a>. Taking your existing libraries and making a <strong>wrap</strong> is as simple as:

<blockquote>
o init-wrap -all
</blockquote>

And consuming "wraps" for other frameworks is also extremely simple. You now don't even need to do "Add Reference" within Visual Studio as OpenWrap handles all of this for you and the system will provide your tools with the dependencies they need. 

I am really excited about this and can see it being used not just for open source projects but for internal frameworks and potentially as part of a deployment solution. Since seeing this talk I have downloaded OpenWrap and am now looking at integrating this at work and for my own open source projects.

<h2>What did I present?</h2>

Well I ran a session on <a href="http://lanyrd.com/2010/barcamp-london-8/sryp/">Kanban</a> which seems to have gone down well with the people who were attending, I certainly had a few people talking to me throughout the day on the topics and it sparked some good discussions even if I wasn't as prepared as I should have been. 

I also co-hosted a session on <a href="http://lanyrd.com/2010/barcamp-london-8/stdt/">Agile! Dos and Don'ts</a> which was really an open forum discussion where people could get together and share their experiences, the good and the bad. It was a lively debate and it was very interesting to see just how much emphasis people are placing on trust throughout the agile process and how things can break apart when that trust is not there.

<h2>Summary</h2>

I had a really good time at BarCamp and will be booking a place for the next one. I would recommend attending to anyone reading this (though get your tickets once I've got mine) and I would also say staying the evening is well worth it, even if you are in London. Once more thank you to the organisers, sponsors and those who attended for making it such a fun (but tiring) weekend.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2010-11-17 18:14:34</wp:post_date>
		<wp:post_date_gmt>2010-11-17 18:14:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>barcamp-london-8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1290099885]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>36</wp:comment_id>
		<wp:comment_author><![CDATA[Tim Blair]]></wp:comment_author>
		<wp:comment_author_email>tim@bla.ir</wp:comment_author_email>
		<wp:comment_author_url>http://tim.bla.ir/</wp:comment_author_url>
		<wp:comment_author_IP>82.21.70.46</wp:comment_author_IP>
		<wp:comment_date>2010-11-17 19:57:33</wp:comment_date>
		<wp:comment_date_gmt>2010-11-17 19:57:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[Glad you enjoyed the event: it was great fun to organise and help run and, despite being well and truely shattered by the end of it, I'd do it again in a flash.

I've also updated the Amazon list and added "The Eyre Affair" by Jasper Fforde.  I'd skipped that one in my list as I've read all his books at least once already!  Hopefully I've not missed anything else.  I've already got a pile of books about two foot tall to get through, but it's good to know that I've another pile waiting for me in that list...]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>DDD9</title>
		<link>http://blog.ninjaferret.co.uk/?p=263</link>
		<pubDate>Tue, 01 Feb 2011 01:26:59 +0000</pubDate>
		<dc:creator><![CDATA[ninjaferret]]></dc:creator>
		
		<category><![CDATA[Conferences]]></category>

		<category domain="category" nicename="conferences"><![CDATA[Conferences]]></category>

		<category><![CDATA[DeveloperDeveloperDeveloper]]></category>

		<category domain="category" nicename="developerdeveloperdeveloper"><![CDATA[DeveloperDeveloperDeveloper]]></category>

		<guid isPermaLink="false">http://blog.ninjaferret.co.uk/?p=263</guid>
		<description></description>
		<content:encoded><![CDATA[Firstly I have to say massive thanks to the organisers of <a href="http://developerdeveloperdeveloper.com/ddd9/">DDD9</a> who, once again, have put on a fantastic free conference for us and thanks to the speakers who put their time and effort into the sessions. 

So what did I go to see:

<h2>Functional Programming in C#</h2>
by Oliver Sturm

Oliver talked us through some of the basic principles of the functional paradigm, he talked about <strong>Closures</strong>, <strong>Functional composition</strong> and even <strong>Currying</strong>. The focus of the talk was on how we can apply the functional principles within C# and how many functional concepts have been brought into the language (LINQ being the most obvious).

The shape of the code that we would write would be significantly different if we approached C# in function manner and there is one thing that I personally would hate which is the proliferation of generic parameters:

Func<T1, T2, T3, T4> func = (a, b, c) => (a * b) + c;
Func<T1, T2, T3, T4> curriedFunc = a => b => c => f(a, b, c); 

This is why I much prefer F#, because it has been designed to be functional and dynamically typed rather than designed to be a static language but Oliver really did explain a lot of the features of the functional paradigm that will make me think about how I approach my C# development. 

<h2>CQRS, Fad or Future?</h2>
by Ian Cooper

I have been a fan of the <strong>CQRS</strong> pattern for some time but I thought that it would be good to hear someone else's opinions and see if Ian was going to give us a pure, simplest definition, and not make the mistake of over-complicating it. Thankfully, Ian takes the same approach to <a href="http://blog.ninjaferret.co.uk/?p=184">CQRS</a> as I do, that is a fundamentally simple pattern separate your <strong>reads</strong> from your <strong>writes</strong>.

For me this should be how we split the interfaces, we have two interfaces into a domain that split these two fundamentally different aspects of the domain. They are then free to use simple models that are focussed on either commands, or focussed on the queries that are needed within the system. Each interface can be then scaled and secured independently. 

Ian told us what CQRS is definitely not, it is definitely not <strong>Event Sourcing</strong> and nor is it <a href="http://blog.ninjaferret.co.uk/?p=221">Domain events</a> though he touched very briefly on these topics. In my opinion the Domain events are the way in which domains interact with each other, they are almost integration level commands, whereas the Commands we normally talk about are externally driven.

<h2>HTML5 Boilerplate</h2>
by Dan Maharry

The <a href="http://html5boilerplate.com/">HTML5 Boilerplate</a> is the collective work of a number of web developers who have built a template that will provide a basic structure for almost any site. I think that this is a fantastic tool that we should hook into because it already provides standards for handling cross-browser Javascript and CSS support to your tools.

<h2>Grok Talks</h2>

<h3>Sharepoint and Visio 2010</h3>
by Dave McMahon

This is a talk that is a shortened version that I have seen at <a href="http://nxtgenug.net">nxtgen user group</a> and it concerns the ability to expose the data bound visio diagrams through sharepoint onto the web using Silverlight controls. 

<h3>CUDA</h3>
by Rob Ashton

CUDA is a framework for running additional processing on the GPU. It seems like a very cool framework with a very odd syntax, lots of angle brackets, I won't go into details but <strong>Add<<<1,1>>>(4, 6, output) </strong> is a little excessive.

<h3>IronRuby</h3>

IronRuby is a ruby implementation based on the Dynamic Language Runtime and we were given a brief but very interesting demonstration of IronRuby running on the Windows Phone 7, being dynamically changed on the phone and then running. This is a fantastic way to update your apps without having to submit to regular reviews on the app store, just download new IronRuby files and you're done.

<h2>Is Your Code Solid?</h2>

Once again this was a demonstration of the SOLID principles that every developer should be aware of and the following design smells that probably mean that our code isn't solid:

<ul>
  <li>Rigidity - Every change causes everything else in the system to change</li>
  <li>Fragility - Changing X will break Y</li>
  <li>Immobility - I can see a way to re-use X but can't re-use it because it would break Y => copy and paste</li>
  <li>Software Viscosity - it takes too much time to "to the right thing", the hack is cheaper</li>
  <li>Environmental Viscosity - external forces stop us "doing the right thing"</li>
  <li>Needless complexity - this really hides the intent of the code</li>
  <li>Needless repetition - copied code is everywhere</li>
  <li>Opacity - this is linked to needless complexity but the code is difficult to maintain and understand</li>
</ul>

<h2>From .NET to Rails</h2>
by Colin Gemmell

This was a great talk that took us through Colin's journey into becoming a ruby developer. Starting from using IDEs that try to emulate the eclipse/visual studio environment including intellisense, which is extremely difficult for a language such as Ruby where to work out what methods are available you have to execute the code, to a basic overview of monkey patching and the problems that it holds. 

Colin took us through the SOLID principles and which ones were applicable to ruby programs. 

This was a refreshingly honest talk, there were problems with ruby but there were advantages to ruby such as the fact that the conventions involved in Rails development allowed for extremely rapid development but they then often caused other problems when it came to scaling of systems and the Active Record pattern. Be sure that you know how many database calls you are making when you are writing your ruby classes, you may be surprised.

We also got a brief look at deployment with Ruby, which, once again really does put the .NET world to shame but this is something that we could learn from and do properly, find an architectural pattern and build templates, packages etc that will allow us to rapidly build our applications.

<h2>Continuous Integration</h2>

The final talk I attended as about continuous integration. The purpose of continuous integration is to assist the developers in producing better software, it was a good talk that focussed on a practical demonstration of TeamCity. 

There were a number of points that I picked up on including the idea that the build environment is something that should be clean, that should be a blank slate and that we should make sure that our systems build on a blank slate... checkout and build... 

The ultimate goal would be to end up in a place where we have sufficient automated testing, sufficiently frequent buildings and sufficiently short iterations that we could build and deploy our code from our build server.

<h2>And finally...</h2>

I would heartily recommend these events to anyone who is interested in development, it is an amazing conference with amazing people and once more many thanks to the organisers, speakers and attendees for making it an education and a pleasure. ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date>2011-02-01 01:26:59</wp:post_date>
		<wp:post_date_gmt>2011-02-01 01:26:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ddd9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1296523635]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
	</channel>
</rss>
